%ADDED BY ME for Comps 2
@inproceedings{AgrawalC23,
	author       = {Ankit Agrawal and
	Jane Cleland{-}Huang},
	editor       = {Kurt Schneider and
	Fabiano Dalpiaz and
	Jennifer Horkoff},
	title        = {Leveraging Traceability to Integrate Safety Analysis Artifacts into
	the Software Development Process},
	booktitle    = {31st {IEEE} International Requirements Engineering Conference, {RE}
	2023 - Workshops, Hannover, Germany, September 4-5, 2023},
	pages        = {475--478},
	publisher    = {{IEEE}},
	year         = {2023}
}

@article{Cleland-HuangBCSR07,
	author       = {Jane Cleland{-}Huang and
	Brian Berenbach and
	Stephen Clark and
	Raffaella Settimi and
	Eli Romanova},
	title        = {Best Practices for Automated Traceability},
	journal      = {Computer},
	volume       = {40},
	number       = {6},
	pages        = {27--35},
	year         = {2007}
}

@book{spriggs2012gsn,
	author = {Spriggs, John},
	address = {London},
	booktitle = {GSN - The Goal Structuring Notation A Structured Approach to Presenting Arguments},
	edition = {1st ed. 2012.},
	isbn = {9781447123125},
	keywords = {Industrial management},
	language = {eng},
	publisher = {Springer London},
	title = {GSN - The Goal Structuring Notation A Structured Approach to Presenting Arguments },
	year = {2012},
}

@article{government2011medical,
	title={Medical Devices Regulations (SOR/98--282)},
	author={Government of Canada},
	year={2022}
}

@article{pardamean2019comparing,
	title={Comparing the accuracy of multiple commercial wearable devices: a method},
	author={Pardamean, Bens and Soeparno, Haryono and Mahesworo, Bharuno and Budiarto, Arif and Baurley, James},
	journal={Procedia Computer Science},
	volume={157},
	pages={567--572},
	year={2019},
	publisher={Elsevier}
}

@article{xie2018evaluating,
	title={Evaluating the validity of current mainstream wearable devices in fitness tracking under various physical activities: comparative study},
	author={Xie, Junqing and Wen, Dong and Liang, Lizhong and Jia, Yuxi and Gao, Li and Lei, Jianbo and others},
	journal={JMIR mHealth and uHealth},
	volume={6},
	number={4},
	pages={e9754},
	year={2018},
	publisher={JMIR Publications Inc., Toronto, Canada}
}

@article{shcherbina2017accuracy,
	title={Accuracy in wrist-worn, sensor-based measurements of heart rate and energy expenditure in a diverse cohort},
	author={Shcherbina, Anna and Mattsson, C Mikael and Waggott, Daryl and Salisbury, Heidi and Christle, Jeffrey W and Hastie, Trevor and Wheeler, Matthew T and Ashley, Euan A},
	journal={Journal of personalized medicine},
	volume={7},
	number={2},
	pages={3},
	year={2017},
	publisher={Multidisciplinary Digital Publishing Institute}
}

@article{el2015currently,
	title={Are currently available wearable devices for activity tracking and heart rate monitoring accurate, precise, and medically beneficial?},
	author={El-Amrawy, Fatema and Nounou, Mohamed Ismail},
	journal={Healthcare informatics research},
	volume={21},
	number={4},
	pages={315--320},
	year={2015},
	publisher={The Korean Society of Medical Informatics}
}

@article{nissen2022heart,
	title={Heart Rate Measurement Accuracy of Fitbit Charge 4 and Samsung Galaxy Watch Active2: Device Evaluation Study},
	author={Nissen, Michael and Slim, Syrine and J{\"a}ger, Katharina and Flaucher, Madeleine and Huebner, Hanna and Danzberger, Nina and Fasching, Peter A and Beckmann, Matthias W and Gradl, Stefan and Eskofier, Bjoern M and others},
	journal={JMIR Formative Research},
	volume={6},
	number={3},
	pages={e33635},
	year={2022},
	publisher={JMIR Publications Inc., Toronto, Canada}
}

@article{miller2021validation,
	title={A validation study of a commercial wearable device to automatically detect and estimate sleep},
	author={Miller, Dean J and Roach, Gregory D and Lastella, Michele and Scanlan, Aaron T and Bellenger, Clint R and Halson, Shona L and Sargent, Charli},
	journal={Biosensors},
	volume={11},
	number={6},
	pages={185},
	year={2021},
	publisher={MDPI}
}

@article{bellenger2021wrist,
	title={Wrist-based photoplethysmography assessment of heart rate and heart rate variability: Validation of WHOOP},
	author={Bellenger, Clint R and Miller, Dean J and Halson, Shona L and Roach, Gregory D and Sargent, Charli},
	journal={Sensors},
	volume={21},
	number={10},
	pages={3571},
	year={2021},
	publisher={MDPI}
}

@article{bellenger2022evaluating,
	title={Evaluating the Typical Day-to-Day Variability of WHOOP-Derived Heart Rate Variability in Olympic Water Polo Athletes},
	author={Bellenger, Clint R and Miller, Dean and Halson, Shona L and Roach, Gregory D and Maclennan, Michael and Sargent, Charli},
	journal={Sensors},
	volume={22},
	number={18},
	pages={6723},
	year={2022},
	publisher={MDPI}
}

@article{kolovos2010epsilon,
	title={The epsilon book},
	author={Kolovos, Dimitrios and Rose, Louis and Paige, Richard and Garcia-Dominguez, Antonio},
	year={2010},
	publisher={Eclipse}
}

@inproceedings{DBLP:conf/ecmdafa/KolovosPP06,
	author    = {Dimitrios S. Kolovos and
	Richard F. Paige and
	Fiona Polack},
	title     = {The Epsilon Object Language {(EOL)}},
	booktitle = {Model Driven Architecture - Foundations and Applications, 2nd European
	Conf., {ECMDA-FA}},
	pages     = {128--142},
	year      = {2006},
	crossref  = {DBLP:conf/ecmdafa/2006},
	url       = {https://doi.org/10.1007/11787044\_11},
	doi       = {10.1007/11787044\_11},
	timestamp = {Wed, 24 Jun 2020 12:15:03 +0200},
	biburl    = {https://dblp.org/rec/conf/ecmdafa/KolovosPP06.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{farmer2008seven,
	title={The seven virtues of simple type theory},
	author={Farmer, William M},
	journal={Journal of Applied Logic},
	volume={6},
	number={3},
	pages={267--286},
	year={2008},
	publisher={Elsevier}
}

@article{CanadaGuidanceDocument,
	title={GUIDANCE DOCUMENT Guidance on the Risk-based Classification System for NonIn Vitro Diagnostic Devices (non-IVDDs)},
	url={https://www.canada.ca/en/health-canada/services/drugs-health-products/medical-devices/application-information/guidance-documents/guidance-document-guidance-risk-based-classification-system-non-vitro-diagnostic.html},
	year={2015},
	publisher={Health Canada},
	author={Government of Canada}
}

@article{VerifyDevices,
	title={GUIDANCE FOR INDUSTRY Keyword Index to Assist Manufacturers in Verifying the Class of Medical Devices},
	url={https://www.canada.ca/en/health-canada/services/drugs-health-products/medical-devices/application-information/guidance-documents/guidance-industry-keyword-assist-manufacturers-class-medical-devices.html},
	year={2006},
	publisher={Health Canada},
	author={Government of Canada}
}

%From Comps 1
%SAFECOMP
@InProceedings{10.1007/978-3-319-24255-2_8,
	author="Beckers, Kristian
	and C{\^o}t{\'e}, Isabelle
	and Frese, Thomas
	and Hatebur, Denis
	and Heisel, Maritta",
	editor="Koornneef, Floor
	and van Gulijk, Coen",
	title="A Structured Validation and Verification Method for Automotive Systems Considering the OEM/Supplier Interface",
	booktitle="Computer Safety, Reliability, and Security",
	year="2015",
	publisher="Springer International Publishing",
	address="Cham",
	pages="90--108",
	abstract="The released ISO 26262 standard for automotive systems requires several validation and verification activities. These validation and verification activities have to be planned and performed jointly by the OEMs and the suppliers. In this paper, we present a systematic, structured and model-based method to plan the required validation and verification activities and collect the results. Planning and the documentation of performed activities are represented by a UML notation extended with stereotypes. The UML model supports the creation of the artifacts required by ISO 26262, enables document generation and a rigorous check of several constraints expressed in OCL. We illustrate our method using the example of an electronic steering column lock system.",
	isbn="978-3-319-24255-2"
}
@InProceedings{10.1007/978-3-031-14835-4_7,
	author="Annable, Nicholas
	and Chiang, Thomas
	and Lawford, Mark
	and Paige, Richard F.
	and Wassyng, Alan",
	editor="Trapp, Mario
	and Saglietti, Francesca
	and Spisl{\"a}nder, Marc
	and Bitsch, Friedemann",
	title="Generating Assurance Cases Using Workflow$^+$ Models",
	booktitle="Computer Safety, Reliability, and Security",
	year="2022",
	publisher="Springer International Publishing",
	address="Cham",
	pages="97--110",
	abstract="The increasing complexity and scale of safety-critical systems makes it challenging to perform necessary safety analyses and document them convincingly in an assurance case. In previous work we introduced Workflow$^+$, a model-based framework for modelling the processes and work products in both the development and safety assurance life cycles. WF$^+$metamodels not only serve as templates that guide the development of a safe system, they also facilitate generation of an assurance case. In this paper, we explain the fundamentals of generating assurance cases from WF$^+$models as well as the advantages of doing this. We also discuss an initial evaluation of the application of WF$^+$in practice.",
	isbn="978-3-031-14835-4"
}
@InProceedings{10.1007/978-3-642-24270-0_9,
	author="Mader, Roland
	and Armengaud, Eric
	and Leitner, Andrea
	and Kreiner, Christian
	and Bourrouilh, Quentin
	and Grie{\ss}nig, Gerhard
	and Steger, Christian
	and Wei{\ss}, Reinhold",
	editor="Flammini, Francesco
	and Bologna, Sandro
	and Vittorini, Valeria",
	title="Computer-Aided PHA, FTA and FMEA for Automotive Embedded Systems",
	booktitle="Computer Safety, Reliability, and Security",
	year="2011",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="113--127",
	abstract="The shift of the automotive industry towards powertrain electrification introduces new automotive sensors, actuators and functions that lead to an increasing complexity of automotive embedded systems. The safety-criticality of these systems demands the application of analysis techniques such as PHA (Preliminary Hazard Analysis), FTA (Fault Tree Analysis) and FMEA (Failure Modes and Effects Analysis) in the development process. The early application of PHA allows to identify and classify hazards and to define top-level safety requirements. Building on this, the application of FTA and FMEA supports the verification of a system architecture defining an embedded system together with connected sensors and controlled actuators. This work presents a modeling framework with automated analysis and synthesis capabilities that supports a safety engineering workflow using the domain-specific language EAST-ADL. The contribution of this work is (1) the definition of properties that indicate the correct application of the workflow using the language. The properties and a model integrating the work products of the workflow are used for the automated detection of errors (property checker) and the automated suggestion and application of corrective measures (model corrector). Furthermore, (2) fault trees and a FMEA table can be automatically synthesized from the same model. The applicability of this computer-aided and tightly integrated approach is evaluated using the case study of a hybrid electric vehicle development.",
	isbn="978-3-642-24270-0"
}
@InProceedings{10.1007/978-3-030-54549-9_20,
	author="C{\^a}rlan, Carmen
	and Ratiu, Daniel",
	editor="Casimiro, Ant{\'o}nio
	and Ortmeier, Frank
	and Bitsch, Friedemann
	and Ferreira, Pedro",
	title="FASTEN.Safe: A Model-Driven Engineering Tool to Experiment with Checkable Assurance Cases",
	booktitle="Computer Safety, Reliability, and Security",
	year="2020",
	publisher="Springer International Publishing",
	address="Cham",
	pages="298--306",
	abstract="The Goal Structuring Notation (GSN) is popular among safety engineers for modeling assurance cases. GSN elements are specified using plain natural language text, this giving safety engineers great flexibility to express their arguments. However, pure textual arguments introduce ambiguities and prevent automation. Currently, assurance cases are verified by manual reviews, which are error prone, time consuming, and not adequate for today's systems complexity and agile development methodologies. In this paper we present our research tool FASTEN.Safe, which extends GSN with a set of higher-level modeling language constructs capturing recurring argumentation patterns and integrating formal system models. This allows automatically checking 1) the intrinsic consistency of assurance models, 2) the consistency of arguments with system models and 3) the verification of safety claims themselves by using external verification tools. FASTEN.Safe is open source and allows experimenting with language abstractions to bridge the world of GSN-based arguments that are common among safety engineers and the world of formal methods that enable automation. Last but not least, we report on the preliminary experience gained with FASTEN.Safe.",
	isbn="978-3-030-54549-9"
}
@InProceedings{10.1007/978-3-319-66284-8_14,
	author="Nicolas, Carlos-F.
	and Eizaguirre, Fernando
	and Larrucea, Asier
	and Barner, Simon
	and Chauvel, Franck
	and Sagardui, Goiuria
	and Perez, Jon",
	editor="Tonetta, Stefano
	and Schoitsch, Erwin
	and Bitsch, Friedemann",
	title="GSN Support of Mixed-Criticality Systems Certification",
	booktitle="Computer Safety, Reliability, and Security ",
	year="2017",
	publisher="Springer International Publishing",
	address="Cham",
	pages="157--172",
	abstract="Safety-critical applications could benefit from the standardisation, cost reduction and cross-domain suitability of current heterogeneous computing platforms. They are of particular interest for Mixed-Criticality Product Lines (MCPL) where safety- and non-safety functions can be deployed on a single embedded device using suitable isolation artefacts and development processes. The development of MCPLs can be facilitated by providing a reference architecture, a model-based design, analysis tools and Modular Safety Cases (MSC) to support the safety claims.",
	isbn="978-3-319-66284-8"
}
@InProceedings{10.1007/978-3-319-99229-7_7,
	author="Fung, Nick L. S.
	and Kokaly, Sahar
	and Di Sandro, Alessio
	and Salay, Rick
	and Chechik, Marsha",
	editor="Gallina, Barbara
	and Skavhaug, Amund
	and Schoitsch, Erwin
	and Bitsch, Friedemann",
	title="MMINT-A: A Tool for Automated Change Impact Assessment on Assurance Cases",
	booktitle="Computer Safety, Reliability, and Security",
	year="2018",
	publisher="Springer International Publishing",
	address="Cham",
	pages="60--70",
	abstract="Assurance cases are a means to argue about the safety, security, etc., of software systems in critical domains. As systems evolve, their assurance cases can grow in complexity, making them difficult to maintain. In this paper, we present a tool MMINT-A that can, in the context of model-driven development, assess the impact of system changes on their assurance cases. To achieve this, MMINT-A implements an impact assessment algorithm from previous work [7, 8] and incorporates a graphical assurance case editor, an annotation mechanism, and two summary tables for the assessment results. We demonstrate the usage of MMINT-A on a Power Sliding Door example from the automotive domain.",
	isbn="978-3-319-99229-7"
}
@InProceedings{10.1007/978-3-642-33675-1_4,
	author="Markovski, Jasen
	and van de Mortel-Fronczak, J. M.",
	editor="Ortmeier, Frank
	and Daniel, Peter",
	title="Modeling for Safety in a Synthesis-Centric Systems Engineering Framework",
	booktitle="Computer Safety, Reliability, and Security",
	year="2012",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="36--49",
	abstract="The ever-increasing complexity of safety-critical systems puts high demands on safety assurance and certification. We focus on the development of control software, where safety) requirements engineering plays a crucial and delicate role. Nowadays, most of the safety features are ensured by the (embedded) control software and, consequently, a great deal of the operational failures primarily originate from requirement errors. We apply formal methods to systematically specify, model, and validate safety (control) requirements, which we then employ to automatically synthesize a control design based on a formal model of the system at hand. The synthesized designs are correct by definition, provided that the models capture all safety aspects of the system. We structure the process in a synthesis-centric model-based systems engineering framework that we apply in an industrial case study involving safe coordination of movement of theme park vehicles. The framework provides rigorous means for modeling of safety requirements, and it supports evolvable product design, requirement reuse, and early integration with hardware prototypes for validation and testing.",
	isbn="978-3-642-33675-1"
}

@InProceedings{10.1007/978-3-319-66266-4_5,
	author="Kokaly, Sahar
	and Salay, Rick
	and Chechik, Marsha
	and Lawford, Mark
	and Maibaum, Tom",
	editor="Tonetta, Stefano
	and Schoitsch, Erwin
	and Bitsch, Friedemann",
	title="Safety Case Impact Assessment in Automotive Software Systems: An Improved Model-Based Approach",
	booktitle="Computer Safety, Reliability, and Security",
	year="2017",
	publisher="Springer International Publishing",
	address="Cham",
	pages="69--85",
	abstract="Like most systems, automotive software systems evolve due to many reasons including adding, removing or modifying features, fixing bugs, or improving system quality. In this context, safety cases, used to demonstrate that a system satisfies predefined safety requirements, often dictated by a standard such as ISO 26262, need to co-evolve. A necessary step is performing an impact assessment to identify how changes in the system affect the safety case. In previous work, we introduced a generic model-based impact assessment approach, that, while sound, was not particularly precise. In this work, we show how exploiting knowledge about system changes, the particular safety case language, and the standard can increase the precision of the impact assessment, reducing any unnecessary revision work required by a safety engineer. We present six precision improvement techniques illustrated on a GSN safety case used with ISO 26262.",
	isbn="978-3-319-66266-4"
}
@InProceedings{10.1007/11563228_19,
	author="Elmqvist, Jonas
	and Nadjm-Tehrani, Simin
	and Minea, Marius",
	editor="Winther, Rune
	and Gran, Bj{\o}rn Axel
	and Dahll, Gustav",
	title="Safety Interfaces for Component-Based Systems",
	booktitle="Computer Safety, Reliability, and Security",
	year="2005",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="246--260",
	abstract="This paper addresses the problems appearing in component-based development of safety-critical systems. We aim at efficient reasoning about safety at system level while adding or replacing components. For safety-related reasoning it does not suffice to consider functioning components in their ''intended'' environments but also the behaviour of components in presence of single or multiple faults.",
	isbn="978-3-540-32000-5"
}

@InProceedings{10.1007/978-3-319-10506-2_19,
	author="Trindade, Raphael Fonte Boa
	and Bulwahn, Lukas
	and Ainhauser, Christoph",
	editor="Bondavalli, Andrea
	and Di Giandomenico, Felicita",
	title="Automatically Generated Safety Mechanisms from Semi-Formal Software Safety Requirements",
	booktitle="Computer Safety, Reliability, and Security",
	year="2014",
	publisher="Springer International Publishing",
	address="Cham",
	pages="278--293",
	abstract="Today's automobiles incorporate a great number of functions that are realized by software. An increasing number of safety-critical functions also follow this trend. For the development of such functions, the ISO 26262 demands a number of additional steps to be performed compared to common software engineering activities. We address some of these demands with means to semi-formally express software safety requirements, tools to automatically implement these requirements, and artifacts and traceability information that can be used for safety case documentation. Through a hierarchical classification of safety mechanisms, a semi-formal specification language for requirements, a generation engine and a case study on a production-model automotive system, we demonstrate: first, how expert knowledge of the functional safety domain can be captured, second, how the tedious and error prone task of manually implementing safety mechanisms can be automated, and third, how this serves as a basis for formal safety argumentation.",
	isbn="978-3-319-10506-2"
}
@InProceedings{10.1007/978-3-642-15651-9_29,
	author="Hutchesson, Stuart
	and McDermid, John",
	editor="Schoitsch, Erwin",
	title="Development of High-Integrity Software Product Lines Using Model Transformation",
	booktitle="Computer Safety, Reliability, and Security",
	year="2010",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="389--401",
	abstract="Academic and commercial approaches to software product line development have concentrated on the rapid instantiation of source code assets to minimise product time to market. Generative programming and model-based software engineering approaches have been suggested as effective ways of achieving this. However, for high-integrity software systems the instantiated product source code has to be accompanied by development process assets that demonstrate and support the product assurance arguments. This paper describes an approach to the model-based development of software product lines that is specifically designed to address the needs of high-integrity software systems. The approach consists of a reference architecture model and component-based development style, supported by model transformations to instantiate the project-specific components and associated development assets.",
	isbn="978-3-642-15651-9"
}
@InProceedings{10.1007/978-3-642-40793-2_26,
	author="Jung, Jessica
	and Jedlitschka, Andreas
	and H{\"o}fig, Kai
	and Domis, Dominik
	and Hiller, Martin",
	editor="Bitsch, Friedemann
	and Guiochet, J{\'e}r{\'e}mie
	and Ka{\^a}niche, Mohamed",
	title="A Controlled Experiment on Component Fault Trees",
	booktitle="Computer Safety, Reliability, and Security",
	year="2013",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="285--292",
	abstract="In safety analysis for safety-critical embedded systems, methods such as FMEA and fault trees (FT) are strongly established in practice. However, the current shift towards model-based development has resulted in various new safety analysis methods, such as Component Integrated Fault Trees (CFT). Industry demands to know the benefits of these new methods. To compare CFT to FT, we conducted a controlled experiment in which 18 participants from industry and academia had to apply each method to safety modeling tasks from the avionics domain. Although the analysis of the solutions showed that the use of CFT did not yield a significantly different number of correct or incorrect solutions, the participants subjectively rated the modeling capacities of CFT significantly higher in terms of model consistency, clarity, and maintainability. The results are promising for the potential of CFT as a model-based approach.",
	isbn="978-3-642-40793-2"
}
@InProceedings{10.1007/978-3-642-24270-0_30,
	author="Carnevali, Laura
	and Ridi, Lorenzo
	and Vicario, Enrico",
	editor="Flammini, Francesco
	and Bologna, Sandro
	and Vittorini, Valeria",
	title="A Framework for Simulation and Symbolic State Space Analysis of Non-Markovian Models",
	booktitle="Computer Safety, Reliability, and Security",
	year="2011",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="409--422",
	abstract="Formal methods supporting development of safety-critical systems require tools that can be integrated within composed environments. Sirio is a framework for simulation and analysis of various timed extensions of Petri Nets, supporting correctness verification and quantitative evaluation of timed concurrent systems. As a characterizing trait, Sirio is expressly designed to support reuse and to facilitate extensions such as the definition of new reward measures, new variants of the analysis, and new models with a different semantics. We describe here the functional responsibilities and the SW architecture of the framework.",
	isbn="978-3-642-24270-0"
}
@INPROCEEDINGS{6698923,  
	author={Beckers, Kristian and Heisel, Maritta and Frese, Thomas and Hatebur, Denis},  
	booktitle={2013 IEEE 24th International Symposium on Software Reliability Engineering (ISSRE)}, 
	title={A structured and model-based hazard analysis and risk assessment method for automotive systems},
	year={2013},  
	volume={}, 
	number={},  
	pages={238-247},  
	doi={10.1109/ISSRE.2013.6698923}
}
@InProceedings{10.1007/978-3-642-33678-2_30,
	author="Braga, Rosana T. Vaccare
	and Trindade Junior, Onofre
	and Castelo Branco, Kalinka Regina
	and Neris, Luciano De Oliveira
	and Lee, Jaejoon",
	editor="Ortmeier, Frank
	and Daniel, Peter",
	title="Adapting a Software Product Line Engineering Process for Certifying Safety Critical Embedded Systems",
	booktitle="Computer Safety, Reliability, and Security",
	year="2012",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="352--363",
	abstract="Software Product Line Engineering (SPLE) is a software development paradigm that aims at reducing the development effort and shorting time-to-market through systematic software reuse. While this paradigm has been successfully applied for the development of embedded systems in various domains, new challenges have emerged from the development of safety critical systems that require certification against a specific standard. Existing SPLE approaches do not explicitly consider the various certification standards or levels that products should satisfy. In this paper, we focus on several practical issues involved in the SPLE process, establishing an infrastructure of a product line engineering for certified products. A metamodel is proposed to capture the entities involved in SPL certification and the relationships among them. ProLiCES, which is a model-driven process for the development of SPLs, was modified to serve as an example of our approach, in the context of the UAV (Unmanned Aerial Vehicle) domain.",
	isbn="978-3-642-33678-2"
}
@InProceedings{10.1007/978-3-642-33675-1_14,
	author="Zug, Sebastian
	and Brade, Tino
	and Kaiser, J{\"o}rg
	and Potluri, Sasanka",
	editor="Ortmeier, Frank
	and Daniel, Peter",
	title="An Approach Supporting Fault-Propagation Analysis for Smart Sensor Systems",
	booktitle="Computer Safety, Reliability, and Security",
	year="2012",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="162--173",
	abstract="Distributed sensor-actuator-systems in automotive or avionic applications have to fulfill safety requirements strictly. Those implementation has to be monitored during the development process and on run-time. For this purpose we presented a data centric fault categorization, fault representation and measurement validation concept.",
	isbn="978-3-642-33675-1"
}

@InProceedings{10.1007/978-3-319-10506-2_19,
	author="Trindade, Raphael Fonte Boa
	and Bulwahn, Lukas
	and Ainhauser, Christoph",
	editor="Bondavalli, Andrea
	and Di Giandomenico, Felicita",
	title="Automatically Generated Safety Mechanisms from Semi-Formal Software Safety Requirements",
	booktitle="Computer Safety, Reliability, and Security",
	year="2014",
	publisher="Springer International Publishing",
	address="Cham",
	pages="278--293",
	abstract="Today's automobiles incorporate a great number of functions that are realized by software. An increasing number of safety-critical functions also follow this trend. For the development of such functions, the ISO 26262 demands a number of additional steps to be performed compared to common software engineering activities. We address some of these demands with means to semi-formally express software safety requirements, tools to automatically implement these requirements, and artifacts and traceability information that can be used for safety case documentation. Through a hierarchical classification of safety mechanisms, a semi-formal specification language for requirements, a generation engine and a case study on a production-model automotive system, we demonstrate: first, how expert knowledge of the functional safety domain can be captured, second, how the tedious and error prone task of manually implementing safety mechanisms can be automated, and third, how this serves as a basis for formal safety argumentation.",
	isbn="978-3-319-10506-2"
}
@InProceedings{10.1007/11875567_27,
	author="Schlick, Rupert
	and Herzner, Wolfgang
	and Le Sergent, Thierry",
	editor="G{\'o}rski, Janusz",
	title="Checking SCADE Models for Correct Usage of Physical Units",
	booktitle="Computer Safety, Reliability, and Security",
	year="2006",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="358--371",
	abstract="Mismatches of units and of scales of values in physical calculations are disastrous, but rather common, in the development of embedded control systems. They can be as plain as mixing feet and metres, or as hidden as a wrong exponent in a complex calculation formula. These errors can be found by a checking algorithm, following some simple rules, if information on the units of the used variables is provided. This paper describes a developer friendly approach of providing this checking functionality in SCADE, a model-based graphical development tool for safety-critical embedded applications.",
	isbn="978-3-540-45763-3"
}

@InProceedings{10.1007/978-3-030-26250-1_1,
	author="Hirata, Celso
	and Nadjm-Tehrani, Simin",
	editor="Romanovsky, Alexander
	and Troubitsyna, Elena
	and Gashi, Ilir
	and Schoitsch, Erwin
	and Bitsch, Friedemann",
	title="Combining GSN and STPA for Safety Arguments",
	booktitle="Computer Safety, Reliability, and Security",
	year="2019",
	publisher="Springer International Publishing",
	address="Cham",
	pages="5--15",
	abstract="Dependability case, assurance case, or safety case is employed to explain why all critical hazards have been eliminated or adequately mitigated in mission-critical and safety-critical systems. Goal Structuring Notation (GSN) is the most employed graphical notation for documenting dependability cases. System Theoretic Process Analysis (STPA) is a technique, based on System Theoretic Accidents Model and Process (STAMP), to identify hazardous control actions, scenarios, and causal factors. STPA is considered a rather complex technique, but there is a growing interest in using STPA in certifications of safety-critical systems development. We investigate how STAMP and STPA can be related to use of assurance cases. This is done in a generic way by representing the STPA steps as part of the evidence and claim documentations within GSN.",
	isbn="978-3-030-26250-1"
}
@InProceedings{10.1007/978-3-319-10557-4_15,
	author="Aversa, Rocco
	and Di Martino, Beniamino
	and Moscato, Francesco",
	editor="Bondavalli, Andrea
	and Ceccarelli, Andrea
	and Ortmeier, Frank",
	title="Critical Systems Verification in MetaMORP(h)OSY",
	booktitle="Computer Safety, Reliability, and Security",
	year="2014",
	publisher="Springer International Publishing",
	address="Cham",
	pages="119--129",
	abstract="Multi Agent Systems (MAS) methodologies are emerging as a new approach for modeling and developing complex distributed systems. When complex constraints have to be verified on critical systems Model Driven Engineering (MDE) methodologies allow for the design and implementation of systems correct by construction. Usually verification is enforced by formal analysis. This paper presents MetaMORP(h)OSY (Meta-modeling of Mas Object-based with Real-time specification in Project Of complex SYstems) methodology and framework. They provide a mean for building MAS models used to verify properties (and requirements) of Critical Systems following a MDE approach. In particular, this work describes model transformation algorithms used in MetaMORP(h)OSY to verify real-time and timed reachability requirements.",
	isbn="978-3-319-10557-4"
}
@InProceedings{10.1007/978-3-319-66284-8_14,
	author="Nicolas, Carlos-F.
	and Eizaguirre, Fernando
	and Larrucea, Asier
	and Barner, Simon
	and Chauvel, Franck
	and Sagardui, Goiuria
	and Perez, Jon",
	editor="Tonetta, Stefano
	and Schoitsch, Erwin
	and Bitsch, Friedemann",
	title="GSN Support of Mixed-Criticality Systems Certification",
	booktitle="Computer Safety, Reliability, and Security ",
	year="2017",
	publisher="Springer International Publishing",
	address="Cham",
	pages="157--172",
	abstract="Safety-critical applications could benefit from the standardisation, cost reduction and cross-domain suitability of current heterogeneous computing platforms. They are of particular interest for Mixed-Criticality Product Lines (MCPL) where safety- and non-safety functions can be deployed on a single embedded device using suitable isolation artefacts and development processes. The development of MCPLs can be facilitated by providing a reference architecture, a model-based design, analysis tools and Modular Safety Cases (MSC) to support the safety claims.",
	isbn="978-3-319-66284-8"
}

@InProceedings{10.1007/978-3-319-10557-4_46,
	author="Luo, Yaping
	and Engelen, Luc
	and van den Brand, Mark",
	editor="Bondavalli, Andrea
	and Ceccarelli, Andrea
	and Ortmeier, Frank",
	title="Metamodel Comparison and Model Comparison for Safety Assurance",
	booktitle="Computer Safety, Reliability, and Security",
	year="2014",
	publisher="Springer International Publishing",
	address="Cham",
	pages="419--430",
	abstract="In safety-critical domains, conceptual models are created in the form of metamodels using different concepts from possibly overlapping domains. Comparison between those conceptual models can facilitate the reuse of models from one domain to another. This paper describes the mappings detected when comparing metamodels and models used for safety assurance. We use a small use case to discuss the mappings between metamodels and models, and the relations between model elements expressed in mappings. Finally, an illustrative case study is used to demonstrate our approach.",
	isbn="978-3-319-10557-4"
}

@InProceedings{10.1007/978-3-540-75101-4_43,
	author="Chen, Yean-Ru
	and Hsiung, Pao-Ann
	and Chen, Sao-Jie",
	editor="Saglietti, Francesca
	and Oster, Norbert",
	title="Modeling and Automatic Failure Analysis of Safety-Critical Systems Using Extended Safecharts",
	booktitle="Computer Safety, Reliability, and Security",
	year="2007",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="451--464",
	abstract="With the rapid progress in science and technology, we find ubiquitous use of safety-critical systems in avionics, consumer electronics, and medical instruments. In such systems, unintentional design faults might result in injury or even death to human beings. To avoid such mishaps, we need to verify safety-critical systems thoroughly, where formal verification techniques such as model checking play a very promising role. Currently, there is practically no automatic technique in formal verification used to formally model system faults and repairs. This work contributes in proposing an extension to the Safecharts model, with which faults and repairs can be easily modeled. Moreover, these Safecharts can be directly transformed into semantically equivalent Extended Timed Automata models for model checking. That is, after these models were integrated into a model checker, such as our previously proposed State Graph Manipulators (SGM) model checker, we can verify safety-critical systems. An application example is run to show the feasibility and benefits of the proposed model-driven verification method for safety-critical systems. As observed, the checking results, such as witnesses of property specifications representing hazards, provide more concrete and useful failure analysis information than the conventional Fault Tree Analysis (FTA).",
	isbn="978-3-540-75101-4"
}
@InProceedings{10.1007/978-3-642-04468-7_2,
	author="Becker, Uwe",
	editor="Buth, Bettina
	and Rabe, Gerd
	and Seyfarth, Till",
	title="Model-Based Development of Medical Devices",
	booktitle="Computer Safety, Reliability, and Security",
	year="2009",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="4--17",
	abstract="Model-based development can offer many advantages compared to other techniques. This paper will demonstrate how models are used to develop safe systems in a medical devices company. The approach described uses a combination of model-driven analysis, model-driven design, model-driven test and model-driven safety analysis. Different approaches have been developed and followed in the past. The approach presented has been developed in an evolutionary manner and by combining approaches described in literature. It turned out to be well suited for the medical device domain and is considered to be a best practice approach. As such it is part of the development process that must be followed when developing new medical devices. The development process has to be defined in a written way and is checked by T{\"U}V and FDA auditors on a yearly base. It is considered to be well above-average and thus may be adopted by other companies developing safety-relevant devices. During the audit process it is verified that the documentation of the process is as expected and that the actual development process is performed according to the defined process. This assures for companies adopting the approach that it is authenticated by daily practice and its use requires only modest overhead.",
	isbn="978-3-642-04468-7"
}


@InProceedings{10.1007/978-3-642-33675-1_4,
	author="Markovski, Jasen
	and van de Mortel-Fronczak, J. M.",
	editor="Ortmeier, Frank
	and Daniel, Peter",
	title="Modeling for Safety in a Synthesis-Centric Systems Engineering Framework",
	booktitle="Computer Safety, Reliability, and Security",
	year="2012",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="36--49",
	abstract="The ever-increasing complexity of safety-critical systems puts high demands on safety assurance and certification. We focus on the development of control software, where safety) requirements engineering plays a crucial and delicate role. Nowadays, most of the safety features are ensured by the (embedded) control software and, consequently, a great deal of the operational failures primarily originate from requirement errors. We apply formal methods to systematically specify, model, and validate safety (control) requirements, which we then employ to automatically synthesize a control design based on a formal model of the system at hand. The synthesized designs are correct by definition, provided that the models capture all safety aspects of the system. We structure the process in a synthesis-centric model-based systems engineering framework that we apply in an industrial case study involving safe coordination of movement of theme park vehicles. The framework provides rigorous means for modeling of safety requirements, and it supports evolvable product design, requirement reuse, and early integration with hardware prototypes for validation and testing.",
	isbn="978-3-642-33675-1"
}
@InProceedings{10.1007/11875567_30,
	author="Berkenk{\"o}tter, Kirsten
	and Hannemann, Ulrich",
	editor="G{\'o}rski, Janusz",
	title="Modeling the Railway Control Domain Rigorously with a UML 2.0 Profile",
	booktitle="Computer Safety, Reliability, and Security",
	year="2006",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="398--411",
	abstract="We introduce the Railway Control Systems Domain (RCSD) profile of the Unified Modeling Language UML 2.0 as a domain specific modeling language for railway and tramway control systems. The RCSD profile covers the segments of the rail network, sensors, and control elements like signals and switches. Using these terms of the railway domain, it facilitates the communication between domain experts and specialists for embedded control system development. Defined as a profile for UML 2.0, the development of precise RCSD descriptions is supported by standard UML tools, visualizing railway networks in the same way as domain experts are used to. The static description of networks is complemented by the characterization of the dynamics within the network with trains running on predefined routes. This behaviour is provided by the semantics of a state transition system derived from the object diagram of a particular network model. This rigorous semantic approach constitutes a prerequisite for further tool-supported analysis of safety requirements, and generation of the actual control system.",
	isbn="978-3-540-45763-3"
}
@InProceedings{10.1007/978-3-642-04468-7_18,
	author="Ge, Xiaocheng
	and Paige, Richard F.
	and McDermid, John A.",
	editor="Buth, Bettina
	and Rabe, Gerd
	and Seyfarth, Till",
	title="Probabilistic Failure Propagation and Transformation Analysis",
	booktitle="Computer Safety, Reliability, and Security",
	year="2009",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="215--228",
	abstract="A key concern in safety engineering is understanding the overall emergent failure behaviour of a system, i.e., behaviour exhibited by the system that is outside its specification of acceptable behaviour. A system can exhibit failure behaviour in many ways, including that from failures of individual or a small number of components. It is important for safety engineers to understand how system failure behaviour relates to failures exhibited by individual components. In this paper, we propose a safety analysis technique, failure propagation and transformation analysis (FPTA), which automatically and quantitatively analyses failures based on a model of failure logic. The technique integrates previous work on automated failure analysis with probabilistic model checking supported by the PRISM tool. We demonstrate the technique and tool on a small, yet realistic safety-related application.",
	isbn="978-3-642-04468-7"
}
@InProceedings{10.1007/978-3-319-66266-4_5,
	author="Kokaly, Sahar
	and Salay, Rick
	and Chechik, Marsha
	and Lawford, Mark
	and Maibaum, Tom",
	editor="Tonetta, Stefano
	and Schoitsch, Erwin
	and Bitsch, Friedemann",
	title="Safety Case Impact Assessment in Automotive Software Systems: An Improved Model-Based Approach",
	booktitle="Computer Safety, Reliability, and Security",
	year="2017",
	publisher="Springer International Publishing",
	address="Cham",
	pages="69--85",
	abstract="Like most systems, automotive software systems evolve due to many reasons including adding, removing or modifying features, fixing bugs, or improving system quality. In this context, safety cases, used to demonstrate that a system satisfies predefined safety requirements, often dictated by a standard such as ISO 26262, need to co-evolve. A necessary step is performing an impact assessment to identify how changes in the system affect the safety case. In previous work, we introduced a generic model-based impact assessment approach, that, while sound, was not particularly precise. In this work, we show how exploiting knowledge about system changes, the particular safety case language, and the standard can increase the precision of the impact assessment, reducing any unnecessary revision work required by a safety engineer. We present six precision improvement techniques illustrated on a GSN safety case used with ISO 26262.",
	isbn="978-3-319-66266-4"
}

@InProceedings{10.1007/978-3-030-83903-1_8,
	author="C{\^a}rlan, Carmen
	and Gallina, Barbara
	and Soima, Liana",
	editor="Habli, Ibrahim
	and Sujan, Mark
	and Bitsch, Friedemann",
	title="Safety Case Maintenance: A Systematic Literature Review",
	booktitle="Computer Safety, Reliability, and Security",
	year="2021",
	publisher="Springer International Publishing",
	address="Cham",
	pages="115--129",
	abstract="Safety standards from different domains recommend the execution of a process for keeping the system safety case up to date, whenever the system undergoes a change, however, without providing any more specific guidelines on how to do this. Even if several (semi)automated safety case maintenance approaches have been proposed in the literature, currently, in the industry, the execution of this process is still manual, being error prone and expensive. To this end, we present in this paper the results of what is, to the best of our knowledge, the first Systematic Literature Review (SLR) conducted with the goal to provide a holistic overview of state-of-the-art safety case maintenance approaches. For each identified approach, we analyze its strengths and weaknesses. We observe that existing approaches are pessimistic, identifying a larger number of safety case elements as impacted by a change than the number of the actually impacted elements. Also, there is limited quantitative impact assessment. Further, existing approaches only address a few system change scenarios when providing guidelines for updating the safety case.",
	isbn="978-3-030-83903-1"
}

@InProceedings{10.1007/11563228_19,
	author="Elmqvist, Jonas
	and Nadjm-Tehrani, Simin
	and Minea, Marius",
	editor="Winther, Rune
	and Gran, Bj{\o}rn Axel
	and Dahll, Gustav",
	title="Safety Interfaces for Component-Based Systems",
	booktitle="Computer Safety, Reliability, and Security",
	year="2005",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="246--260",
	abstract="This paper addresses the problems appearing in component-based development of safety-critical systems. We aim at efficient reasoning about safety at system level while adding or replacing components. For safety-related reasoning it does not suffice to consider functioning components in their ''intended'' environments but also the behaviour of components in presence of single or multiple faults.",
	isbn="978-3-540-32000-5"
}
@InProceedings{10.1007/978-3-319-24249-1_7,
	author="Ratiu, Daniel
	and Zeller, Marc
	and Killian, Lennart",
	editor="Koornneef, Floor
	and van Gulijk, Coen",
	title="Safety.Lab: Model-Based Domain Specific Tooling for Safety Argumentation",
	booktitle="Computer Safety, Reliability, and Security",
	year="2015",
	publisher="Springer International Publishing",
	address="Cham",
	pages="72--82",
	abstract="Assurance cases capture the argumentation that a system is safe by putting together pieces of evidence at different levels of abstraction and of different nature. Managing the interdependencies between these artefacts lies at the heart of any safety argument. Keeping the assurance case complete and consistent with the system is a manual and very ressource consuming process. Current tools do not address these challenges in constructing and maintaining safety arguments. In this paper we present a tooling prototype called Safety.Lab which features rich and deeply integrated models to describe requirements, hazards list, fault trees and architecture. We show how Safety.Lab opens opportunities to automate completeness and consistency checks for safety argumentation.",
	isbn="978-3-319-24249-1"
}

@InProceedings{10.1007/978-3-031-14835-4_14,
	author="Dietrich, Christian
	and Bargholz, Malte
	and Loeck, Yannick
	and Budoj, Marcel
	and Nedaskowskij, Luca
	and Lohmann, Daniel",
	editor="Trapp, Mario
	and Saglietti, Francesca
	and Spisl{\"a}nder, Marc
	and Bitsch, Friedemann",
	title="SailFAIL: Model-Derived Simulation-Assisted ISA-Level Fault-Injection Platforms",
	booktitle="Computer Safety, Reliability, and Security",
	year="2022",
	publisher="Springer International Publishing",
	address="Cham",
	pages="207--221",
	abstract="For systematic fault injection (FI), we deterministically re-execute a program, introduce faults, and observe the program outcome to assess its resilience in the presence of transient hardware faults. For this, simulation-assisted ISA-level FI provides a good trade-off between result quality and the required time to execute the FI campaign. However, for each architecture, this requires a specialized ISA simulator with tracing, injection, and error observation capabilities; a dependency that not only increases the bar for the exploration of ISA-level hardening mechanisms, but which can also deviate from the behavior of the actual hardware, especially when an error propagates through the system and triggers semantic edge cases.",
	isbn="978-3-031-14835-4"
}
@InProceedings{10.1007/978-3-642-33675-1_6,
	author="de la Vara, Jose Luis
	and Nair, Sunil
	and Verhulst, Eric
	and Studzizba, Janusz
	and Pepek, Piotr
	and Lambourg, Jerome
	and Sabetzadeh, Mehrdad",
	editor="Ortmeier, Frank
	and Daniel, Peter",
	title="Towards a Model-Based Evolutionary Chain of Evidence for Compliance with Safety Standards",
	booktitle="Computer Safety, Reliability, and Security",
	year="2012",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="64--78",
	abstract="Compliance with safety standards can greatly increase the development cost and time of critical systems. Major problems arise when evolutions to a system entail reconstruction of the body of safety evidence. When changes occur in the development or certification processes, identification of the new evidence to provide, the evidence that is no longer adequate, or the evidence that can be reused poses some challenges. Therefore, practitioners need support to identify how a chain of evidence evolves as a result of the changes. Otherwise, execution of the above activities can be very costly, and it can even result in abandonment of certification efforts. This paper outlines a solution to deal with these challenges. The solution is based on the use of model-driven engineering technology, which has already been applied for safety certification but not from an evolutionary chain of evidence-based perspective. The paper also sets the background for developing the solution, describes real situations in which the solution can help industry, and discusses possible challenges for developing it. The solution will be developed as part of OPENCOSS, a research project on cross-domain evolutionary certification.",
	isbn="978-3-642-33675-1"
}
@InProceedings{10.1007/978-3-642-33675-1_36,
	author="Asplund, Fredrik
	and Biehl, Matthias
	and Loiret, Fr{\'e}d{\'e}ric",
	editor="Ortmeier, Frank
	and Daniel, Peter",
	title="Towards the Automated Qualification of Tool Chain Design",
	booktitle="Computer Safety, Reliability, and Security",
	year="2012",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="392--399",
	abstract="The development of safety-critical embedded systems is supported by a number of development tools, which are increasingly integrated into automated tool chains. Safety standards require these tool chains to be qualified, which is costly and requires a large effort. To reduce cost and effort tool chains can be composed of pre-qualified tools and then themselves pre-qualified by identifying the parts of tool chain software that have an impact on safety more exactly. In this paper we propose the use of a modeling language to describe this tool chain composition. This allows us to reduce effort even further by automatically analyzing the tool chain model for safety issues. It also promises to reduce the effort and cost of later steps in the deployment of the tool chain by formalizing the communication of safety issues and automating the generation of code for tool chain software.",
	isbn="978-3-642-33675-1"
}
@InProceedings{10.1007/978-3-319-66284-8_4,
	author="Wardzi{\'{n}}ski, Andrzej
	and Jones, Paul",
	editor="Tonetta, Stefano
	and Schoitsch, Erwin
	and Bitsch, Friedemann",
	title="Uniform Model Interface for Assurance Case Integration with System Models",
	booktitle="Computer Safety, Reliability, and Security ",
	year="2017",
	publisher="Springer International Publishing",
	address="Cham",
	pages="39--51",
	abstract="Assurance cases are developed and maintained in parallel with corresponding system models and therefore need to reference each other. Managing the correctness and consistency of interrelated safety argument and system models is essential for system dependability and is a nontrivial task. The model interface presented in this paper enables a uniform process of establishing and managing assurance case references to various types of system models. References to system metamodels are specified in an argument pattern and then used for assurance case instantiation. The proposed approach permits incremental development of assurance cases that maintain consistency with corresponding system models throughout the system development life cycle.",
	isbn="978-3-319-66284-8"
}
%MODELS
@inproceedings{10.1109/MODELS-C.2019.00094,
	author = {Meyers, Bart and Gadeyne, Klaas and Oakes, Bentley James and Bernaerts, Matthias and Vangheluwe, Hans and Denil, Joachim},
	title = {A Model-Driven Engineering Framework to Support the Functional Safety Process},
	year = {2019},
	isbn = {9781728151250},
	publisher = {IEEE Press},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1109/MODELS-C.2019.00094},
	doi = {10.1109/MODELS-C.2019.00094},
	abstract = {The design of safety-related systems traditionally has long and costly development cycles due to the highly manual safety engineering process, which is guided by industry standards. In this paper, we present a modelling framework that supports DevOps principles of continuous testing and fast development iterations for the design of safety-critical systems. We show how modelling can help introducing DevOps in the context of functional safety analysis, and we also report how DevOps was used during the development of the framework.},
	booktitle = {Proceedings of the 22nd International Conference on Model Driven Engineering Languages and Systems},
	pages = {619–623},
	numpages = {5},
	location = {Munich, Germany},
	series = {MODELS '19}
}

@INPROCEEDINGS{9592513,
	author={Tietz, Vanessa and Schoepf, Julian and Waldvogel, Andreas and Annighoefer, Bjoern},  
	booktitle={2021 ACM/IEEE 24th International Conference on Model Driven Engineering Languages and Systems (MODELS)},   
	title={A Concept for a Qualifiable (Meta)-Modeling Framework Deployable in Systems and Tools of Safety-Critical and Cyber-Physical Environments},   
	year={2021},  
	volume={},  
	number={},  
	pages={163-169},  
	doi={10.1109/MODELS50736.2021.00025}
}

@INPROCEEDINGS{9592441,  author={Viger, Torin and Murphy, Logan and Di Sandro, Alessio and Shahin, Ramy and Chechik, Marsha},  booktitle={2021 ACM/IEEE 24th International Conference on Model Driven Engineering Languages and Systems (MODELS)},   title={A Lean Approach to Building Valid Model-Based Safety Arguments},   year={2021},  volume={},  number={},  pages={194-204},  doi={10.1109/MODELS50736.2021.00028}}

@inproceedings{10.1145/3365438.3410952,
	author = {Cheng, Betty H. C. and Clark, Robert Jared and Fleck, Jonathon Emil and Langford, Michael Austin and McKinley, Philip K.},
	title = {AC-ROS: Assurance Case Driven Adaptation for the Robot Operating System},
	year = {2020},
	isbn = {9781450370196},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1145/3365438.3410952},
	doi = {10.1145/3365438.3410952},
	abstract = {Cyber-physical systems that implement self-adaptive behavior, such as autonomous robots, need to ensure that requirements remain satisfied across run-time adaptations. The Robot Operating System (ROS), a middleware infrastructure for robotic systems, is widely used in both research and industrial applications. However, ROS itself does not assure self-adaptive behavior. This paper introduces AC-ROS, which fills this gap by using assurance case models at run time to manage the self-adaptive operation of ROS-based systems. Assurance cases provide structured arguments that a system satisfies requirements and can be specified graphically with Goal Structuring Notation (GSN) models. AC-ROS uses GSN models to instantiate a ROS-based MAPE-K framework, which in turn uses these models at run time to assure system behavior adheres to requirements across adaptations. For this study, AC-ROS is implemented and tested on EvoRally, a 1:5-scale autonomous vehicle.},
	booktitle = {Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems},
	pages = {102–113},
	numpages = {12},
	keywords = {goal structuring notation, assurance case, self-adaptive systems, digital twin, robot operating system, cyber-physical systems},
	location = {Virtual Event, Canada},
	series = {MODELS '20}
}

%%%Continue citations from here Oct 23rd
@inproceedings{10.1145/2467307.2467316,
	author = {Taromirad, Masoumeh and Paige, Richard F.},
	title = {Agile Requirements Traceability Using Domain-Specific Modelling Languages},
	year = {2012},
	isbn = {9781450318044},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1145/2467307.2467316},
	doi = {10.1145/2467307.2467316},
	abstract = {Requirements traceability is an important mechanism for managing verification, validation and change impact analysis challenges in system engineering. Numerous model-based approaches have been proposed to support requirements traceability, but significant challenges remain, including finding the appropriate level of granularity for modelling traceability and coping with the lack of uniformity in requirements management tools. This paper argues for an agile modelling approach to managing requirements traceability and, in this context, proposes a domain/project-specific requirements traceability modelling approach. The preliminary approach is illustrated briefly in the context of the safety-critical systems engineering domain, where agile traceability from functional and safety requirements is necessary to underpin certification.},
	booktitle = {Proceedings of the 2012 Extreme Modeling Workshop},
	pages = {45–50},
	numpages = {6},
	location = {Innsbruck, Austria},
	series = {XM '12}
}
@inproceedings{10.1145/3239372.3239413,
	author = {Diskin, Zinovy and Maibaum, Tom and Wassyng, Alan and Wynn-Williams, Stephen and Lawford, Mark},
	title = {Assurance via Model Transformations and Their Hierarchical Refinement},
	year = {2018},
	isbn = {9781450349499},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1145/3239372.3239413},
	doi = {10.1145/3239372.3239413},
	abstract = {Assurance is a demonstration that a complex system (such as a car or a communication network) possesses an importantproperty, such as safety or security, with a high level of confidence. In contrast to currently dominant approaches to building assurance cases, which are focused on goal structuring and/or logical inference, we propose considering assurance as a model transformation (MT) enterprise: saying that a system possesses an assured property amounts to saying that a particular assurance view of the system comprising the assurance data, satisfies acceptance criteria posed as assurance constraints. While the MT realizing this view is very complex, we show that it can be decomposed into elementary MTs via a hierarchy of refinement steps. The transformations at the bottom level are ordinary MTs that can be executed for data specifying the system, thus providing the assurance data to be checked against the assurance constraints. In this way, assurance amounts to traversing the hierarchy from the top to the bottom and assuring the correctness of each MT in the path. Our approach has a precise mathematical foundation (rooted in process algebra and category theory) --- a necessity if we are to model precisely and then analyze our assurance cases. We discuss the practical applicability of the approach, and argue that it has several advantages over existing approaches.},
	booktitle = {Proceedings of the 21th ACM/IEEE International Conference on Model Driven Engineering Languages and Systems},
	pages = {426–436},
	numpages = {11},
	keywords = {Assurance case, Model transformation, Decomposition, Substitution, Block diagram},
	location = {Copenhagen, Denmark},
	series = {MODELS '18}
}
@inproceedings{10.1145/3417990.3419484,
	author = {Babikian, Aren A.},
	title = {Automated Generation of Test Scenario Models for the System-Level Safety Assurance of Autonomous Vehicles},
	year = {2020},
	isbn = {9781450381352},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1145/3417990.3419484},
	doi = {10.1145/3417990.3419484},
	abstract = {Autonomous vehicles controlled by advanced machine learning techniques are significantly gaining in popularity. However, the safety engineering practices currently used in such vehicles are not capable of justifying that AI techniques would prevent unsafe situations with a designated level of confidence and reliability. One related challenge is the perpetually changing environment that autonomous vehicles must interact with, which must be taken into consideration when deriving test suites for their safety assurance. As a result, a common approach for testing autonomous vehicles involves subjecting them to test scenarios and evaluating their system-level quality of service. As it stands, such system-level testing approaches do exist but only at a prototypical and conceptual level: these approaches cannot handle complex system-level traffic scenarios and related coverage criteria. I plan to address this challenge through my PhD studies by (1) defining situation coverage as an abstract coverage criteria for autonomous vehicle testing, (2) evaluating situation coverage of existing test suites obtained by off-the-shelf simulation tools, and (3) proposing a test suite generation approach that provides test scenarios with increasing situation coverage as output.},
	booktitle = {Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
	articleno = {24},
	numpages = {7},
	keywords = {verification &amp; validation, automated test generation, system-level testing, graph model synthesis, autonomous vehicles},
	location = {Virtual Event, Canada},
	series = {MODELS '20}
}

@inproceedings{10.1145/3365438.3410962,
	author = {Semer\'{a}th, Oszk\'{a}r and Babikian, Aren A. and Li, Anqi and Marussy, Krist\'{o}f and Varr\'{o}, Daniel},
	title = {Automated Generation of Consistent Models with Structural and Attribute Constraints},
	year = {2020},
	isbn = {9781450370196},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1145/3365438.3410962},
	doi = {10.1145/3365438.3410962},
	abstract = {Automatically synthesizing consistent models is a key prerequisite for many testing scenarios in autonomous driving or software tool validation where model-based systems engineering techniques are frequently used to ensure a designated coverage of critical cornercases. From a practical perspective, an inconsistent model is irrelevant as a test case (e.g. false positive), thus each synthetic model needs to simultaneously satisfy various structural and attribute well-formedness constraints. While different logic solvers or dedicated graph solvers have recently been developed, they fail to handle either structural or attribute constraints in a scalable way.In the current paper, we combine a structural graph solver that uses partial models with an SMT-solver to automatically derive models which simultaneously fulfill structural and attribute constraints while key theoretical properties of model generation like completeness or diversity are still ensured. This necessitates a sophisticated bidirectional interaction between different solvers which carry out consistency checks, decision, unit propagation, concretization steps. We evaluate the scalability and diversity of our approach in the context of three complex case studies.},
	booktitle = {Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems},
	pages = {187–199},
	numpages = {13},
	keywords = {SMT-solvers, partial modeling, model generation},
	location = {Virtual Event, Canada},
	series = {MODELS '20}
}
@inproceedings{10.1145/2432631.2432635,
	author = {Helle, Philipp},
	title = {Automatic SysML-Based Safety Analysis},
	year = {2012},
	isbn = {9781450318006},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1145/2432631.2432635},
	doi = {10.1145/2432631.2432635},
	abstract = {Model-based Safety Analysis (MBSA) techniques exist that ensure an increased consistency by formalising the safety analysis and allow automation of the safety calculations. With the increased acceptance of Model-based Systems Engineering (MBSE) as the new systems engineering paradigm, it seems natural to combine MBSE and MBSA. This work provides a methodology and tool support for an integrated MBSE and MBSA on one common model based on SysML which allows the systems engineers to perform an automated safety analysis to receive quick feedback on their design decisions during the system design phase.},
	booktitle = {Proceedings of the 5th International Workshop on Model Based Architecting and Construction of Embedded Systems},
	pages = {19–24},
	numpages = {6},
	keywords = {MBSE, safety analysis, MBSA, SysML},
	location = {Innsbruck, Austria},
	series = {ACES-MB '12}
}
@inproceedings{10.1145/3417990.3421408,
	author = {Paz, Andr\'{e}s and Boussaidi, Ghizlane El},
	title = {Breesse: Bridging EMF, Simulink and Stateflow for Model-Based Design of Safety-Critical Systems},
	year = {2020},
	isbn = {9781450381352},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1145/3417990.3421408},
	doi = {10.1145/3417990.3421408},
	abstract = {Both the Eclipse platform and MathWorks have successfully provided entire ecosystems and tooling for Model-Driven Engineering (MDE). On the one hand, the Eclipse community has built a rich set of open source tools and applications to address different MDE needs. Several of these tools and applications are actively used for developing academic and industrial systems. On the other hand, MathWorks with its Simulink and Stateflow technologies has focused on design modelling, simulation and code generation to deliver one of the most widely used modelling frameworks for developing embedded and safety-critical systems. Leveraging these two MDE ecosystems in the form of an integrated environment for embedded and safety-critical system development would be expected. Nonetheless, these two ecosystems rarely interact due to MathWorks' closed nature and proprietary file formats.This paper presents Breesse, a live bridge for the Eclipse Modeling Framework ecosystem and the MathWorks Simulink and Stateflow ecosystem. Breesse is an open source tool that was built in response to the needs of two industry partners who develop avionics systems. It was realized with EMF technologies and the MATLAB Engine API for Java. Breesse is able to import the contents of Simulink and Stateflow design models and libraries into EMF-based Simulink and Stateflow representations. These EMF-based representations enable the manipulation of the design models in other existing EMF-based tools for MDE. Evaluation of the tool was carried out through its use in three avionics system designs.},
	booktitle = {Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
	articleno = {38},
	numpages = {10},
	keywords = {stateflow, integrated environment, eclipse modeling framework, model-driven engineering, simulink, open source tools, bridge},
	location = {Virtual Event, Canada},
	series = {MODELS '20}
}

@INPROCEEDINGS{8101272,  author={Barner, Simon and Diewald, Alexander and Migge, Jörn and Syed, Ali and Fohler, Gerhard and Faugère, Madeleine and Pérez, Daniel Gracia},  booktitle={2017 ACM/IEEE 20th International Conference on Model Driven Engineering Languages and Systems (MODELS)},   title={DREAMS Toolchain: Model-Driven Engineering of Mixed-Criticality Systems},   year={2017},  volume={},  number={},  pages={259-269},  doi={10.1109/MODELS.2017.28}}

@inproceedings{10.1145/2976767.2976803,
	author = {Blache, Gunter},
	title = {Handling Index-out-of-Bounds in Safety-Critical Embedded C Code Using Model-Based Development},
	year = {2016},
	isbn = {9781450343213},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1145/2976767.2976803},
	doi = {10.1145/2976767.2976803},
	abstract = {Embedded C code for safety critical systems faces some substantial challenges: like every other embedded SW code it must be efficient in terms of code size, data size and execution time, but it must also behave safely under all circumstances, without a user or operator who could handle the errors. One kind of problem is array index accesses where the index is outside the specified value range. The C language does not specify the behaviour in such cases, which clearly violates the requirements for safe code. In this paper, the approach of the model-based development tool "ASCET" is explained, and the experiences of two case studies that describe the adoption of index protection are presented.},
	booktitle = {Proceedings of the ACM/IEEE 19th International Conference on Model Driven Engineering Languages and Systems},
	pages = {143–149},
	numpages = {7},
	location = {Saint-malo, France},
	series = {MODELS '16}
}


@inproceedings{10.1109/MODELS-C.2019.00125,
	author = {Stegen, Jef and Dutre, Stefan and Guo, Joe Zhensheng and Zeller, Marc and Rothbauer, Stefan},
	title = {Meta Model Application for Consistency Management of Models for Avionic Systems Design},
	year = {2019},
	isbn = {9781728151250},
	publisher = {IEEE Press},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1109/MODELS-C.2019.00125},
	doi = {10.1109/MODELS-C.2019.00125},
	abstract = {This paper presents the application of a meta model and single underlying model on an applied avionics system design use case. System models, safety assurance cases and safety requirements are maintained in a central repository. This enables to link these data which are originally developed in unrelated tools. By having such a central repository, traceability can be established, and consistency can be ensured, which leads to less errors and a shorter development time. A meta model was constructed which matches the central repository to enable bidirectional synchronization with an external authoring tool.},
	booktitle = {Proceedings of the 22nd International Conference on Model Driven Engineering Languages and Systems},
	pages = {790–795},
	numpages = {6},
	keywords = {meta model, avionics, safety assurance, single underlying model, system design, consistency},
	location = {Munich, Germany},
	series = {MODELS '19}
}

@inproceedings{10.1145/3417990.3420047,
	author = {Pedroza, Gabriel and Mockly, Guillaume},
	title = {Method and Framework for Security Risks Analysis Guided by Safety Criteria},
	year = {2020},
	isbn = {9781450381352},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1145/3417990.3420047},
	doi = {10.1145/3417990.3420047},
	abstract = {As previously discussed [19], the challenges to achieve a consistent intertwining between safety and security are rather diverse and complex. Recent advances in safety and security suggest that risks analyses provide guidance for achieving a comprehensive alignment. However, for many domains, like in aeronautics, security is rather a recent concern whereas aircraft development has been mostly guided by safety criteria for several decades. The referred disparity along with the fact that security is, in many respects, a discipline still in evolution, imposes restrictions for specifying and applying methods to conduct safety and security co-engineering as a unified process. In this paper, we present the progress in the development of a model-based method, a framework and a tool useful to conduct a security risks analysis guided by safety criteria and goals. Among others, the approach relies on know-how found in the state of the art, in standards like ED202, ED203 (EUROCAE)1, as well as in open knowledge bases like CAPEC and CWE (MITRE)2. These sources are integrated which allows the instantiation of patterns of attacks, vulnerabilities, and architectures, which are crucial elements to semi-automate the analysis. A rule-based algorithm for exploring potential attack paths across an architecture is proposed and implemented. The approach is finally demonstrated by analyzing a combined attack-failure path in a Flight Control System which can undermine the safety of a modern aircraft. The framework and tool support seek safety-security by design and aim to facilitate the reuse of case studies and to settle a basis for repeatability and results comparison.},
	booktitle = {Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
	articleno = {58},
	numpages = {8},
	keywords = {co-engineering, risks analysis, security, model driven engineering, attack-failure path, safety},
	location = {Virtual Event, Canada},
	series = {MODELS '20}
}

@INPROCEEDINGS{9592499,  author={Langford, Michael Austin and Chan, Kenneth H. and Fleck, Jonathon Emil and McKinley, Philip K. and Cheng, Betty H.C.},  booktitle={2021 ACM/IEEE 24th International Conference on Model Driven Engineering Languages and Systems (MODELS)},   title={MoDALAS: Model-Driven Assurance for Learning-Enabled Autonomous Systems},   year={2021},  volume={},  number={},  pages={182-193},  doi={10.1109/MODELS50736.2021.00027}}

@INPROCEEDINGS{9592422,  author={Cooper, Justin and De la Vega, Alfonso and Paige, Richard and Kolovos, Dimitris and Bennett, Michael and Brown, Caroline and Piña, Beatriz Sanchez and Rodriguez, Horacio Hoyos},  booktitle={2021 ACM/IEEE 24th International Conference on Model Driven Engineering Languages and Systems (MODELS)},   title={Model-Based Development of Engine Control Systems: Experiences and Lessons Learnt},   year={2021},  volume={},  number={},  pages={308-319},  doi={10.1109/MODELS50736.2021.00038}}

@INPROCEEDINGS{8101259,  author={Denney, Ewen and Pai, Ganesh and Whiteside, Iain},  booktitle={2017 ACM/IEEE 20th International Conference on Model Driven Engineering Languages and Systems (MODELS)},   title={Model-Driven Development of Safety Architectures},   year={2017},  volume={},  number={},  pages={156-166},  doi={10.1109/MODELS.2017.27}}

@inproceedings{10.1145/3365438.3410933,
	author = {Sch\"{u}tt, Barbara and Braun, Thilo and Otten, Stefan and Sax, Eric},
	title = {SceML: A Graphical Modeling Framework for Scenario-Based Testing of Autonomous Vehicles},
	year = {2020},
	isbn = {9781450370196},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1145/3365438.3410933},
	doi = {10.1145/3365438.3410933},
	abstract = {Ensuring the functional correctness and safety of autonomous vehicles is a major challenge for the automotive industry. However, exhaustive physical test drives are not feasible, as billions of driven kilometers would be required to obtain reliable results. Scenario-based testing is an approach to tackle this problem and reduce necessary test drives by replacing driven kilometers with simulations of relevant or interesting scenarios. These scenarios can be generated or extracted from recorded data with machine learning algorithms or created by experts. In this paper, we propose a novel graphical scenario modeling language. The graphical framework allows experts to create new scenarios or review ones designed by other experts or generated by machine learning algorithms. The scenario description is modeled as a graph and based on behavior trees. It supports different abstraction levels of scenario description during software and test development. Additionally, the graph-based structure provides modularity and reusable sub-scenarios, an important use case in scenario modeling. A graphical visualization of the scenario enhances comprehensibility for different users. The presented approach eases the scenario creation process and increases the usage of scenarios within development and testing processes.},
	booktitle = {Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems},
	pages = {114–120},
	numpages = {7},
	keywords = {modularity, graphical modeling language, automotive software engineering, graph, scenario-based, testing},
	location = {Virtual Event, Canada},
	series = {MODELS '20}
}

@inproceedings{10.1145/3417990.3421264,
	author = {Wiecher, Carsten and Japs, Sergej and Kaiser, Lydia and Greenyer, Joel and Dumitrescu, Roman and Wolff, Carsten},
	title = {Scenarios in the Loop: Integrated Requirements Analysis and Automotive System Validation},
	year = {2020},
	isbn = {9781450381352},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1145/3417990.3421264},
	doi = {10.1145/3417990.3421264},
	abstract = {The development of safety-relevant systems in the automotive industry requires the definition of high-quality requirements and tests for the coordination and monitoring of development activities in an agile development environment. In this paper we describe a Scenarios in the Loop (SCIL) approach. SCIL combines (1) natural language requirements specification based on Behavior-Driven Development (BDD) with (2) formal and test-driven requirements modeling and analysis, and (3) integrates discipline-specific tools for software and system validation during development. A central element of SCIL is a flexible and executable scenario-based modeling language, the Scenario Modeling Language for Kotlin (SMLK). SMLK allows for an intuitive requirements formalization, and supports engineers to move iteratively, and continuously aided by automated checks, from stakeholder requirements to the validation of the implemented system. We evaluated the approach using a real example from the field of e-mobility.},
	booktitle = {Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
	articleno = {35},
	numpages = {10},
	keywords = {requirements analysis, automotive systems engineering, system validation, BizDevOps},
	location = {Virtual Event, Canada},
	series = {MODELS '20}
}

@INPROCEEDINGS{8906897,  author={Majzik, István and Semeráth, Oszkár and Hajdu, Csaba and Marussy, Kristóf and Szatmári, Zoltán and Micskei, Zoltán and Vörös, András and Babikian, Aren A. and Varró, Dániel},  booktitle={2019 ACM/IEEE 22nd International Conference on Model Driven Engineering Languages and Systems (MODELS)},   title={Towards System-Level Testing with Coverage Guarantees for Autonomous Vehicles},   year={2019},  volume={},  number={},  pages={89-94},  doi={10.1109/MODELS.2019.00-12}}

@inproceedings{10.1109/MODELS-C.2019.00010,
	author = {Bernaerts, Matthias and Oakes, Bentley James and Vanherpen, Ken and Aelvoet, Bjorn and Vangheluwe, Hans and Denil, Joachim},
	title = {Validating Industrial Requirements with a Contract-Based Approach},
	year = {2019},
	isbn = {9781728151250},
	publisher = {IEEE Press},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1109/MODELS-C.2019.00010},
	doi = {10.1109/MODELS-C.2019.00010},
	abstract = {This paper presents our contract-based design technique for formalizing requirements during the design phase of a complicated and safety-critical automotive component. In our approach, contracts are created using property specification patterns to eliminate ambiguous unstructured natural language requirements, which could lead to misinterpretations or mismatched interfaces in the integration phases of the design process.These patterns are then automatically transformed into Signal Temporal Logic (STL) formulas. The STL formulas are verified on a modeled system of the component, utilizing the Matlab® toolbox Breach. This approach validates the industrial requirements described in the contracts, and can help achieve the requirement-based testing demanded by automotive safety standard ISO 26262.},
	booktitle = {Proceedings of the 22nd International Conference on Model Driven Engineering Languages and Systems},
	pages = {18–27},
	numpages = {10},
	keywords = {property specification patterns, contract-based design, signal temporal logic, formalizing requirements, automotive, requirement validation},
	location = {Munich, Germany},
	series = {MODELS '19}
}

%FSE

@inproceedings{10.1145/2635868.2661665,
	author = {Dziwok, Stefan and Gerking, Christopher and Becker, Steffen and Thiele, Sebastian and Heinzemann, Christian and Pohlmann, Uwe},
	title = {A Tool Suite for the Model-Driven Software Engineering of Cyber-Physical Systems},
	year = {2014},
	isbn = {9781450330565},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2635868.2661665},
	doi = {10.1145/2635868.2661665},
	abstract = {Cyber-physical systems, e.g., autonomous cars or trains, interact with their physical environment. As a consequence, they commonly have to coordinate with other systems via complex message communication while realizing safety-critical and real-time tasks. As a result, those systems should be correct by construction. Software architects can achieve this by using the MechatronicUML process and language. This paper presents the MechatronicUML Tool Suite that offers unique features to support the MechatronicUML modeling and analyses tasks.},
	booktitle = {Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
	pages = {715–718},
	numpages = {4},
	keywords = {DSL, timed model checking, real-time coordination, mechatronic systems, Cyber-physical systems, system simulation},
	location = {Hong Kong, China},
	series = {FSE 2014}
}

@inproceedings{10.1145/3368089.3417060,
	author = {Mackenzie, Bennett and Pantelic, Vera and Marks, Gordon and Wynn-Williams, Stephen and Selim, Gehan and Lawford, Mark and Wassyng, Alan and Diab, Moustapha and Weslati, Feisel},
	title = {Change Impact Analysis in Simulink Designs of Embedded Systems},
	year = {2020},
	isbn = {9781450370431},
	publisher = {ACM},
	doi = {10.1145/3368089.3417060},
	abstract = {This paper presents and evaluates the Boundary Diagram Tool for change impact analysis of large Simulink designs of embedded systems. In our previous work, we developed the Reach/Coreach Tool for model slicing within a single Simulink model. The current work extends the Reach/Coreach Tool to trace the impact of model changes through multiple models comprising an embedded system, including network interfaces. The change impact analysis results are represented using various diagrams motivated by industrial needs. Several techniques are used to improve understanding of impact analyses of large industrial systems. The tool has been integrated into the software development process of a large automotive OEM (Original Equipment Manufacturer) to support the following activities: change request analysis and evaluation, implementation, verification and integration. The tool also aids impact analyses required for compliance with functional safety standards. The tool’s effectiveness has been demonstrated on production-scale models.},
	booktitle = {Proc. 28th ACM ESEC/FSE},
	pages = {1274–1284},
	numpages = {11},
	keywords = {Change impact analysis, software change request, model-based design, change management, embedded software, software maintenance, model slicing, Matlab/Simulink, tool},
	series = {ESEC/FSE 2020}
}

@inproceedings{10.1145/1316550.1316555,
	author = {Banci, Michele and Fantechi, Alessandro and Gnesi, Stefania and Lombardi, Giovanni},
	title = {Experimenting with Diversity in the Model Driven Development of a Railway Signaling System},
	year = {2007},
	isbn = {9781595937254},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1316550.1316555},
	doi = {10.1145/1316550.1316555},
	abstract = {In this paper we discuss how we have introduced elements of diversity in the experimental model driven development process of a railway signalling system. The experience has been done inside a larger industrial project undertaken to evaluate the feasibility of employing formal modelling and automatic code generation in the development of a new generation of railway signalling systems hosted by a new fault-tolerant platform. The diversity is introduced at the level of the compilation of the generated code, and is aimed to discover possible faults due to the compilation environment or to the underlying operating system. Other forms of diversity will be then experimented in a step by step fashion.},
	booktitle = {Proceedings of the 2007 Workshop on Engineering Fault Tolerant Systems},
	pages = {5–es},
	keywords = {automatic code generation, formal modelling},
	location = {Dubrovnik, Croatia},
	series = {EFTS '07}
}
@inproceedings{10.1145/3236024.3275534,
	author = {Mansoor, Niloofar and Saddler, Jonathan A. and Silva, Bruno and Bagheri, Hamid and Cohen, Myra B. and Farritor, Shane},
	title = {Modeling and Testing a Family of Surgical Robots: An Experience Report},
	year = {2018},
	isbn = {9781450355735},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3236024.3275534},
	doi = {10.1145/3236024.3275534},
	abstract = {Safety-critical applications often use dependability cases to validate that specified properties are invariant, or to demonstrate a counter example showing how that property might be violated. However, most dependability cases are written with a single product in mind. At the same time, software product lines (families of related software products) have been studied with the goal of modeling variability and commonality, and building family based techniques for both analysis and testing. However, there has been little work on building an end to end dependability case for a software product line (where a property is modeled, a counter example is found and then validated as a true positive via testing), and none that we know of in an emerging safety-critical domain, that of robotic surgery. In this paper, we study a family of surgical robots, that combine hardware and software, and are highly configurable, representing over 1300 unique robots. At the same time, they are considered safety-critical and should have associated dependability cases. We perform a case study to understand how we can bring together lightweight formal analysis, feature modeling, and testing to provide an end to end pipeline to find potential violations of important safety properties. In the process, we learned that there are some interesting and open challenges for the research community, which if solved will lead towards more dependable safety-critical cyber-physical systems.},
	booktitle = {Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
	pages = {785–790},
	numpages = {6},
	keywords = {software product lines, testing and analysis, Alloy, cyber-physical systems},
	location = {Lake Buena Vista, FL, USA},
	series = {ESEC/FSE 2018}
}

@inproceedings{10.1145/2025113.2025191,
	author = {Falessi, Davide and Nejati, Shiva and Sabetzadeh, Mehrdad and Briand, Lionel and Messina, Antonio},
	title = {SafeSlice: A Model Slicing and Design Safety Inspection Tool for SysML},
	year = {2011},
	isbn = {9781450304436},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2025113.2025191},
	doi = {10.1145/2025113.2025191},
	abstract = {Software safety certification involves checking that the software design meets the (software) safety requirements. In practice, inspections are one of the primary vehicles for ensuring that safety requirements are satisfied by the design. Unless the safety-related aspects of the design are clearly delineated, the inspections conducted by safety assessors would have to consider the entire design, although only small fragments of the design may be related to safety. In a model-driven development context, this means that the assessors have to browse through large models, understand them, and identify the safety-related fragments. This is time-consuming and error-prone, specially noting that the assessors are often third-party regulatory bodies who were not involved in the design. To address this problem, we describe in this paper a prototype tool called, SafeSlice, that enables one to automatically extract the safety-related slices (fragments) of design models. The main enabler for our slicing technique is the traceability between the safety requirements and the design, established by following a structured design methodology that we propose. Our work is grounded on SysML, which is being increasingly used for expressing the design of safety-critical systems. We have validated our work through two case studies and a control experiment which we briefly outline in the paper.},
	booktitle = {Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering},
	pages = {460–463},
	numpages = {4},
	keywords = {sysml, model slicing, traceability, safety certification},
	location = {Szeged, Hungary},
	series = {ESEC/FSE '11}
}

%ICSE
@inproceedings{10.1145/3377811.3380332,
	author = {Alenazi, Mounifah and Niu, Nan and Savolainen, Juha},
	title = {A Novel Approach to Tracing Safety Requirements and State-Based Design Models},
	year = {2020},
	isbn = {9781450371216},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3377811.3380332},
	doi = {10.1145/3377811.3380332},
	abstract = {Traceability plays an essential role in assuring that software and systems are safe to use. Automated requirements traceability faces the low precision challenge due to a large number of false positives being returned and mingled with the true links. To overcome this challenge, we present a mutation-driven method built on the novel idea of proactively creating many seemingly correct tracing targets (i.e., mutants of a state machine diagram), and then exploiting model checking within process mining to automatically verify whether the safety requirement's properties hold in the mutants. A mutant is killed if its model checking fails; otherwise, it is survived. We leverage the underlying killed-survived distinction, and develop a correlation analysis procedure to identify the traceability links. Experimental evaluation results on two automotive systems with 27 safety requirements show considerable precision improvements compared with the state-of-the-art.},
	booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
	pages = {848–860},
	numpages = {13},
	keywords = {mutation analysis, requirements engineering, process mining, traceability, systems modeling language (SysML)},
	location = {Seoul, South Korea},
	series = {ICSE '20}
}

@inproceedings{10.1109/RET.2019.00008,
	author = {Paz, Andr\'{e}s and Boussaidi, Ghizlane El},
	title = {A Requirements Modelling Language to Facilitate Avionics Software Verification and Certification},
	year = {2019},
	publisher = {IEEE Press},
	url = {https://doi.org/10.1109/RET.2019.00008},
	doi = {10.1109/RET.2019.00008},
	abstract = {Engineering avionics software is a complex task. Even more so due to their safety-critical nature. Aviation authorities require avionics software suppliers to provide appropriate evidence of achieving DO-178C objectives for the verification of outputs from the requirements and design processes, and requirements-based testing. This concern is leading suppliers to consider and incorporate more effective engineering methods that can support them in their verification and certification endeavours. This paper presents SpecML, a modelling language providing a requirements specification infrastructure for avionics software. The goal of SpecML is threefold: 1) enforce certification information mandated by DO-178C, 2) capture requirements in natural language to encourage adoption in industry. and 3) capture requirements in a structured, semantically-rich formalism to enable requirements-based analyses and testing. The modelling language has been developed as a UML profile extending SysML Requirements. A reference implementation has been developed and experiences on its application to an openly-available avionics software specification are reported.},
	booktitle = {Proceedings of the 6th International Workshop on Requirements Engineering and Testing},
	pages = {1–8},
	numpages = {8},
	keywords = {requirements-based testing, requirements modelling language, avionics software, certification, DO-178C},
	location = {Montreal, Quebec, Canada},
	series = {RET '19}
}

@inproceedings{10.1145/3183519.3183551,
	author = {Arefin, Syed S. and Hemmati, Hadi and Loewen, Howard W.},
	title = {Evaluating Specification-Level MC/DC Criterion in Model-Based Testing of Safety Critical Systems},
	year = {2018},
	isbn = {9781450356596},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3183519.3183551},
	doi = {10.1145/3183519.3183551},
	abstract = {Safety-critical software systems in the aviation domain, e.g., a UAV autopilot software, needs to go through a formal process of certification (e.g., DO-178C standard). One of the main requirements for this certification is having a set of explicit test cases for each software requirement. To achieve this, the DO-178C standard recommends using a model-driven approach. For instance, model-based testing (MBT) is recommended in its DO-331 supplement to automatically generate system-level test cases for the requirements provided as the specification models. In addition, the DO-178C standard also requires high level of source code coverage, which typically is achieved by a separate set of structural testing. However, the standard allows targeting high code coverage with MBT, only if the applicants justify their plan on how to achieve high code coverage through model-level testing.In this study, we propose using the Modified Condition and Decision coverage ("MC/DC") criterion on the specification-level constraints rather than the standard-recommended "all transition coverage" criterion, to achieve higher code coverage through MBT. We evaluate our approach in the context of a case study at MicroPilot Inc., our industry collaborator, which is a UAV producer company. We implemented our idea as an MC/DC coverage on transition guards in a UML state-machine-based testing tool that was developed in-house. The results show that applying model-level MC/DC coverage outperforms the typical transition-coverage (DO-178C's required MBT coverage criterion), with respect to source code-level "all condition-decision coverage criterion" by 33%. In addition, our MC/DC test suite detected three new faults and two instances of legacy specification in the code that are no longer in use, compared to the "all transition" test suite.},
	booktitle = {Proceedings of the 40th International Conference on Software Engineering: Software Engineering in Practice},
	pages = {256–265},
	numpages = {10},
	keywords = {software certification, search-based testing, safety critical systems, aviation, UAV, model-based testing, MC/DC, constraint coverage, DO-178C, code coverage},
	location = {Gothenburg, Sweden},
	series = {ICSE-SEIP '18}
}

@inproceedings{10.1145/2568225.2568290,
	author = {Rempel, Patrick and M\"{a}der, Patrick and Kuschke, Tobias and Cleland-Huang, Jane},
	title = {Mind the Gap: Assessing the Conformance of Software Traceability to Relevant Guidelines},
	year = {2014},
	isbn = {9781450327565},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2568225.2568290},
	doi = {10.1145/2568225.2568290},
	abstract = {Many guidelines for safety-critical industries such as aeronautics, medical devices, and railway communications, specify that traceability must be used to demonstrate that a rigorous process has been followed and to provide evidence that the system is safe for use. In practice, there is a gap between what is prescribed by guidelines and what is implemented in practice, making it difficult for organizations and certifiers to fully evaluate the safety of the software system. In this paper we present an approach, which parses a guideline to extract a Traceability Model depicting software artifact types and their prescribed traces. It then analyzes the traceability data within a project to identify areas of traceability failure. Missing traceability paths, redundant and/or inconsistent data, and other problems are highlighted. We used our approach to evaluate the traceability of seven safety-critical software systems and found that none of the evaluated projects contained traceability that fully conformed to its relevant guidelines.},
	booktitle = {Proceedings of the 36th International Conference on Software Engineering},
	pages = {943–954},
	numpages = {12},
	keywords = {assessment, failure patterns, compliance, safety, Software traceability, certification, software and system safety, inspection, standard, conformance, guideline, safety critical},
	location = {Hyderabad, India},
	series = {ICSE 2014}
}

@inproceedings{DBLP:conf/splc/Cleland-HuangAI20,
	author    = {Jane Cleland{-}Huang and
	Ankit Agrawal and
	Md Nafee Al Islam and
	Eric Tsai and
	Maxime Van Speybroeck and
	Michael Vierhauser},
	title     = {Requirements-driven configuration of emergency response missions with
	small aerial vehicles},
	booktitle = {{SPLC} '20: 24th {ACM} International Systems and Software Product
	Line Conference, Montreal, Quebec, Canada, October 19-23, 2020, Volume
	{A}},
	pages     = {26:1--26:12},
	year      = {2020},
	crossref  = {DBLP:conf/splc/2020a},
	url       = {https://doi.org/10.1145/3382025.3414950},
	doi       = {10.1145/3382025.3414950},
	timestamp = {Thu, 29 Oct 2020 11:14:57 +0100},
	biburl    = {https://dblp.org/rec/conf/splc/Cleland-HuangAI20.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{10.1109/SER-IP.2017..1,
	author = {Mubeen, Saad and Lawson, Harold "Bud" and Lundb\"{a}ck, John and G\r{a}lnander, Mattias and Lundb\"{a}ck, Kurt-Lennart},
	title = {Provisioning of Predictable Embedded Software in the Vehicle Industry: The Rubus Approach},
	year = {2017},
	isbn = {9781538627976},
	publisher = {IEEE Press},
	url = {https://doi.org/10.1109/SER-IP.2017..1},
	doi = {10.1109/SER-IP.2017..1},
	abstract = {Providing computer-based services for vehicular systems has evolved to the point where majority of functions are realised by software. However, the need to provide safety in critical functions such as braking and engine control requires an approach that can guarantee reliable operation of the functions. At the same time, there are a variety of vehicle functions that are less critical. The main challenge for the vehicle manufacturers is to provide both types of functions in an economic and reliable manner. To meet this challenge, this paper considers the Rubus tool chain for model- and component-based development of vehicle software and a well-proven (in the industrial use for over twenty years) and certified (according to ISO 26262) real-time operating system for its execution. The paper provides an overview of the Rubus approach and driving concepts as well as the research results that are used in providing its tool chain. Moreover, the paper presents a success story of a unique academic-industrial collaboration in the vehicle domain that has resulted in sustained development of the tool chain. The collaborators form a clear value chain from academia, through tool developer, to the end users of the technology. The paper also highlights the perspectives of the collaborators and discusses the challenges faced, experiences gained and lessons learned from several technology transfer projects.},
	booktitle = {Proceedings of the 4th International Workshop on Software Engineering Research and Industrial Practice},
	pages = {3–9},
	numpages = {7},
	location = {Buenos Aires, Argentina},
	series = {SER\&amp;IP '17}
}

@inproceedings{10.1109/ICSE-C.2017.44,
	author = {Kokaly, Sahar},
	title = {Managing Assurance Cases in Model Based Software Systems},
	year = {2017},
	isbn = {9781538615898},
	publisher = {IEEE Press},
	url = {https://doi.org/10.1109/ICSE-C.2017.44},
	doi = {10.1109/ICSE-C.2017.44},
	abstract = {Software has emerged as a significant part of many domains, including financial service platforms, social networks and vehicle control. Standards organizations have responded to this by creating regulations to address issues such as safety and privacy. In this context, compliance of software with standards has emerged as a key issue. For software development organizations, compliance is a complex and costly goal to achieve and is often accomplished by producing so-called assurance cases, which demonstrate that the system indeed satisfies the property imposed by a standard (e.g., safety, privacy, security). As systems and standards undergo evolution for a variety of reasons, maintaining assurance cases multiplies the effort. In this work, we propose to exploit the connection between the field of model management and the problem of compliance management and propose methods that use model management techniques to address compliance scenarios such as assurance case evolution and reuse. For validation, we ground our approaches on the automotive domain and the ISO 26262 standard for functional safety of road vehicles.},
	booktitle = {Proceedings of the 39th International Conference on Software Engineering Companion},
	pages = {453–456},
	numpages = {4},
	keywords = {regulatory compliance, assurance cases, reuse, co-evolution, impact assessment, model management},
	location = {Buenos Aires, Argentina},
	series = {ICSE-C '17}
}

%ISSRE
@inproceedings{beckers2013structured,
	title={A structured and model-based hazard analysis and risk assessment method for automotive systems},
	author={Beckers, Kristian and Heisel, Maritta and Frese, Thomas and Hatebur, Denis},
	booktitle={2013 IEEE 24th International Symposium on Software Reliability Engineering (ISSRE)},
	pages={238--247},
	year={2013},
	organization={IEEE}
}

@INPROCEEDINGS{8987469,  author={Gannous, Aiman and Andrews, Anneliese},  booktitle={2019 IEEE 30th International Symposium on Software Reliability Engineering (ISSRE)},   title={Integrating Safety Certification Into Model-Based Testing of Safety-Critical Systems},   year={2019},  volume={},  number={},  pages={250-260},  doi={10.1109/ISSRE.2019.00033}}

@INPROCEEDINGS{8987451,  author={Morozov, Andrey and Ding, Kai and Steurer, Mikael and Janschek, Klaus},  booktitle={2019 IEEE 30th International Symposium on Software Reliability Engineering (ISSRE)},   title={OpenErrorPro: A New Tool for Stochastic Model-Based Reliability and Resilience Analysis},   year={2019},  volume={},  number={},  pages={303-312},  doi={10.1109/ISSRE.2019.00038}}

%ESEM
@inproceedings{10.1145/2961111.2962621,
	author = {de la Vara, Jose Luis and Mar\'{\i}n, Beatriz and Giachetti, Giovanni and Ayora, Clara},
	title = {Do Models Improve the Understanding of Safety Compliance Needs? Insights from a Pilot Experiment},
	year = {2016},
	isbn = {9781450344272},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2961111.2962621},
	doi = {10.1145/2961111.2962621},
	abstract = {Context. Many critical systems must meet safety compliance needs from safety standards. These standards are usually large textual documents whose compliance needs can be hard to understand. As a solution, the use of models has been proposed. Goal. We aim to provide evidence of the extent to which models improve the understanding of safety compliance needs. Method. We designed an experiment and ran a pilot to study the effectiveness, efficiency, and perceived benefits of understanding these needs, with the text of standards and with models in the form of UML object diagrams. Results. The overall results from 15 Bachelor students show that the effectiveness of understanding safety compliance needs increases very little with models (2%), and the efficiency even decreases (24%). Nonetheless, the results improve when the potential complexity in navigating the models is taken into account (15% effectiveness increase). The students find benefits in using the models but most consider that the models are hard to understand. Conclusions. The extent to which models improve the understanding of safety compliance needs seems to be lower than what the research community expects. New studies are necessary to confirm our initial insights.},
	booktitle = {Proceedings of the 10th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
	articleno = {32},
	numpages = {6},
	keywords = {Safety-critical system, understanding, safety standard, pilot experiment, safety compliance needs, model},
	location = {Ciudad Real, Spain},
	series = {ESEM '16}
}

%ASE
@inproceedings{10.1145/1865875.1865878,
	author = {Lafaye, Micha\"{e}l and Faura, David and Gatti, Marc and Pautet, Laurent},
	title = {A New Modeling Approach for IMA Platform Early Validation},
	year = {2010},
	isbn = {9781450301237},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1865875.1865878},
	doi = {10.1145/1865875.1865878},
	abstract = {This past few years, avionics platform conception changed to integrated architecture, permitting one processor to host some applications, in order to reduce weight and space. But this method entails more complexity, especially in safety domain, while time to market tends to decrease, so new development processes are needed. Model-based approaches are now mature enough to design embedded critical systems and perform architecture exploration.In this paper we present a new modeling approach allowing avionics platform description and dynamic simulation. This method aim at dimensioning the architecture according to the applications it has to process, and to achieve early platform validation.},
	booktitle = {Proceedings of the 7th International Workshop on Model-Based Methodologies for Pervasive and Embedded Software},
	pages = {17–20},
	numpages = {4},
	keywords = {avionics systems, simulation, modeling, AADL, systemC, real-time},
	location = {Antwerpen, Belgium},
	series = {MOMPES '10}
}

%Other sources
@article{mashkoor2022model,
	title={Model-driven engineering of safety and security software systems: A systematic mapping study and future research directions},
	author={Mashkoor, Atif and Egyed, Alexander and Wille, Robert and Stock, Sebastian},
	journal={Journal of Software: Evolution and Process},
	pages={e2457},
	year={2022},
	publisher={Wiley Online Library}
}

%Traceability and CIA
@book{arnold1996software,
	title={Software change impact analysis},
	author={Arnold, Robert S},
	year={1996},
	publisher={IEEE Computer Society Press}
}

@inproceedings{heisig2019generic,
	title={A generic traceability metamodel for enabling unified end-to-end traceability in software product lines},
	author={Heisig, Philipp and Stegh{\"o}fer, Jan-Philipp and Brink, Christopher and Sachweh, Sabine},
	booktitle={Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing},
	pages={2344--2353},
	year={2019}
}

@inproceedings{kelleher2005reusable,
	title={A reusable traceability framework using patterns},
	author={Kelleher, Justin},
	booktitle={Proceedings of the 3rd international workshop on Traceability in emerging forms of software engineering},
	pages={50--55},
	year={2005}
}

@inproceedings{maletic2005xml,
	title={An XML based approach to support the evolution of model-to-model traceability links},
	author={Maletic, Jonathan I and Collard, Michael L and Simoes, Bonita},
	booktitle={Proceedings of the 3rd international workshop on Traceability in emerging forms of software engineering},
	pages={67--72},
	year={2005}
}

@inproceedings{mirakhorli2011tracing,
	title={Tracing architectural concerns in high assurance systems (NIER track)},
	author={Mirakhorli, Mehdi and Cleland-Huang, Jane},
	booktitle={Proceedings of the 33rd International Conference on Software Engineering},
	pages={908--911},
	year={2011}
}

@inproceedings{rubasinghe2018software,
	title={Software artefact traceability analyser: a case-study on POS system},
	author={Rubasinghe, ID and Meedeniya, DA and Perera, I},
	booktitle={Proceedings of the 6th International Conference on Communications and Broadband Networking},
	pages={1--5},
	year={2018}
}

@inproceedings{asuncion2010software,
	title={Software traceability with topic modeling},
	author={Asuncion, Hazeline U and Asuncion, Arthur U and Taylor, Richard N},
	booktitle={Proceedings of the 32nd ACM/IEEE international conference on Software Engineering-Volume 1},
	pages={95--104},
	year={2010}
}


%Traceability Templates
@misc{tmat_cdc,
	title = {Requirements Traceability Matrix Template},
	author = {CDC},
	year = {1999},
	url = {https://www2a.cdc.gov/cdcup/library/templates/CDC_UP_Requirements_Traceability_Matrix_Template.xls},
	lastaccessed = {2024-04-30}
}


%Requirements Diagrams
@INPROCEEDINGS{6945504,
	author={Sena Marques, Milena Rota and Siegert, Eliane and Brisolara, Lisane},
	booktitle={2014 12th IEEE International Conference on Industrial Informatics (INDIN)}, 
	title={Integrating UML, MARTE and sysml to improve requirements specification and traceability in the embedded domain}, 
	year={2014},
	volume={},
	number={},
	pages={176-181},
	keywords={Unified modeling language;Wheels;Timing;Sensors;Embedded software;Object oriented modeling;Requirement Engineering;Embedded Software;Embedded Systems;Requirements Management;Traceability},
	doi={10.1109/INDIN.2014.6945504}}




@INPROCEEDINGS{10260782,
	author={Agrawal, Ankit and Cleland-Huang, Jane},
	booktitle={2023 IEEE 31st International Requirements Engineering Conference Workshops (REW)}, 
	title={Leveraging Traceability to Integrate Safety Analysis Artifacts into the Software Development Process}, 
	year={2023},
	volume={},
	number={},
	pages={475-478},
	keywords={Visualization;Analytical models;Conferences;Cyber-physical systems;Emergency services;Autonomous aerial vehicles;Software;Safety Case;Safety Analysis;Traceability},
	doi={10.1109/REW57809.2023.00089}}




%Feature Modelling
@article{kang1990feature,
	title={Feature-oriented domain analysis (FODA) feasibility study. Software Engineering Institute},
	author={Kang, Kyo and Cohen, Sholom and Hess, James and Novak, William and Peterson, A Spencer},
	journal={Universitas Carnegie Mellon, Pittsburgh, Pennsylvania},
	year={1990}
}

@article{kang2002feature,
	title={Feature-oriented product line engineering},
	author={Kang, Kyo C and Lee, Jaejoon and Donohoe, Patrick},
	journal={IEEE software},
	volume={19},
	number={4},
	pages={58--65},
	year={2002},
	publisher={IEEE}
}

@inproceedings{kastner2009featureide,
	title={FeatureIDE: A tool framework for feature-oriented software development},
	author={Kastner, Christian and Thum, Thomas and Saake, Gunter and Feigenspan, Janet and Leich, Thomas and Wielgorz, Fabian and Apel, Sven},
	booktitle={2009 ieee 31st international conference on software engineering},
	pages={611--614},
	year={2009},
	organization={IEEE}
}

@article{thum2014featureide,
	title={FeatureIDE: An extensible framework for feature-oriented software development},
	author={Th{\"u}m, Thomas and K{\"a}stner, Christian and Benduhn, Fabian and Meinicke, Jens and Saake, Gunter and Leich, Thomas},
	journal={Science of Computer Programming},
	volume={79},
	pages={70--85},
	year={2014},
	publisher={Elsevier}
}

@inproceedings{hofner2006feature,
	title={Feature algebra},
	author={H{\"o}fner, Peter and Khedri, Ridha and M{\"o}ller, Bernhard},
	booktitle={International Symposium on Formal Methods},
	pages={300--315},
	year={2006},
	organization={Springer}
}

@article{hofner2011algebra,
	title={An algebra of product families},
	author={H{\"o}fner, Peter and Khedri, Ridha and M{\"o}ller, Bernhard},
	journal={Software \& Systems Modeling},
	volume={10},
	pages={161--182},
	year={2011},
	publisher={Springer}
}

@article{kang1998form,
	title={FORM: A feature-; oriented reuse method with domain-; specific reference architectures},
	author={Kang, Kyo C and Kim, Sajoong and Lee, Jaejoon and Kim, Kijoo and Shin, Euiseob and Huh, Moonhang},
	journal={Annals of software engineering},
	volume={5},
	number={1},
	pages={143--168},
	year={1998},
	publisher={Springer}
}

@book{van2007software,
	title={Software product lines in action: the best industrial practice in product line engineering},
	author={Van der Linden, Frank J and Schmid, Klaus and Rommes, Eelco},
	year={2007},
	publisher={Springer Science \& Business Media}
}

@inproceedings{tsuchiya2013recovering,
	title={Recovering traceability links between requirements and source code in the same series of software products},
	author={Tsuchiya, Ryosuke and Kato, Tadahisa and Washizaki, Hironori and Kawakami, Masumi and Fukazawa, Yoshiaki and Yoshimura, Kentaro},
	booktitle={Proceedings of the 17th International Software Product Line Conference},
	pages={121--130},
	year={2013}
}

@inproceedings{czarnecki2004staged,
	title={Staged configuration using feature models},
	author={Czarnecki, Krzysztof and Helsen, Simon and Eisenecker, Ulrich},
	booktitle={Software Product Lines: Third International Conference, SPLC 2004, Boston, MA, USA, August 30-September 2, 2004. Proceedings 3},
	pages={266--283},
	year={2004},
	organization={Springer}
}


%Development styles
@inproceedings{royce1987managing,
	title={Managing the development of large software systems: concepts and techniques},
	author={Royce, Winston W},
	booktitle={Proceedings of the 9th international conference on Software Engineering},
	pages={328--338},
	year={1987}
}

@article{boehm1988spiral,
	title={A spiral model of software development and enhancement},
	author={Boehm, Barry W.},
	journal={Computer},
	volume={21},
	number={5},
	pages={61--72},
	year={1988},
	publisher={IEEE}
}

@inproceedings{forsberg1991relationship,
	title={The relationship of system engineering to the project cycle},
	author={Forsberg, Kevin and Mooz, Harold},
	booktitle={INCOSE international symposium},
	volume={1},
	number={1},
	pages={57--65},
	year={1991},
	organization={Wiley Online Library}
}

@misc{beck2001agile,
	title={The agile manifesto},
	author={Beck, Kent and Beedle, Mike and Van Bennekum, Arie and Cockburn, Alistair and Cunningham, Ward and Fowler, Martin and Grenning, James and Highsmith, Jim and Hunt, Andrew and Jeffries, Ron and others},
	year={2001},
	publisher={The Agile Alliance, www. agilemanifesto. org}
}

@book{palmer2001practical,
	title={A practical guide to feature-driven development},
	author={Palmer, Steve R and Felsing, Mac},
	year={2001},
	publisher={Pearson Education}
}

%Change Impact Analysis
@book{lehnert2011review,
	title={A review of software change impact analysis},
	author={Lehnert, Steffen},
	year={2011},
	publisher={Universit{\"a}tsbibliothek Ilmenau}
}

@inproceedings{ryder2001change,
	title={Change impact analysis for object-oriented programs},
	author={Ryder, Barbara G and Tip, Frank},
	booktitle={Proceedings of the 2001 ACM SIGPLAN-SIGSOFT workshop on Program analysis for software tools and engineering},
	pages={46--53},
	year={2001}
}

%SysML
@article{sysml2019omg,
	title={Omg systems modeling language (omg sysml™), v1. 6},
	author={Specification, OMG Available},
	journal={Object Management Group},
	year={2019}
}


%Use case diagrams
@article{gemino2009use,
	title={Use case diagrams in support of use case modeling: Deriving understanding from the picture},
	author={Gemino, Andrew and Parker, Drew},
	journal={Journal of Database Management (JDM)},
	volume={20},
	number={1},
	pages={1--24},
	year={2009},
	publisher={IGI Global}
}

@inproceedings{von2002modeling,
	title={Modeling variability by UML use case diagrams},
	author={von der Ma{\ss}en, Thomas and Lichter, Horst},
	booktitle={Proceedings of the International Workshop on Requirements Engineering for product lines},
	pages={19--25},
	year={2002}
}

@book{lichter2002modelling,
	title={Modelling Requirements and Architectures for Software Product Lines},
	author={Lichter, Horst and von der Ma{\ss}en, Thomas and Weiler, Thomas},
	year={2002},
	publisher={RWTH, Department of Computer Science}
}

@inproceedings{wegmann2000role,
	title={The role of “Roles” in use case diagrams},
	author={Wegmann, Alain and Genilloud, Guy},
	booktitle={International Conference on the Unified Modeling Language},
	pages={210--224},
	year={2000},
	organization={Springer}
}

@article{siau2004use,
	title={Are use case and class diagrams complementary in requirements analysis? An experimental study on use case and class diagrams in UML},
	author={Siau, Keng and Lee, Lihyunn},
	journal={Requirements engineering},
	volume={9},
	pages={229--237},
	year={2004},
	publisher={Springer}
}

%Xtext

@inproceedings{eysholdt2010xtext,
	title={Xtext: implement your language faster than the quick and dirty way},
	author={Eysholdt, Moritz and Behrens, Heiko},
	booktitle={Proceedings of the ACM international conference companion on Object oriented programming systems languages and applications companion},
	pages={307--309},
	year={2010}
}

%Sirius

@inproceedings{viyovic2014sirius,
	title={Sirius: A rapid development of DSM graphical editor},
	author={Viyovi{\'c}, Vladimir and Maksimovi{\'c}, Mirjam and Perisi{\'c}, Branko},
	booktitle={IEEE 18th International Conference on Intelligent Engineering Systems INES 2014},
	pages={233--238},
	year={2014},
	organization={IEEE}
}

%Acceleo Query Language
@misc{aql,
	author = {Obeo},
	title = {Acceleo Query Language Documentation},
	year = {2015},
	URL = {https://eclipse.dev/acceleo/documentation/} 
}

%UML

@book{fowler2018uml,
	title={UML distilled: a brief guide to the standard object modeling language},
	author={Fowler, Martin},
	year={2018},
	publisher={Addison-Wesley Professional}
}

%Gherkin

@book{nicieja2017writing,
	title={Writing Great Specifications: Using Specification by Example and Gherkin},
	author={Nicieja, Kamil},
	year={2017},
	publisher={Simon and Schuster}
}

@article{cucumberdocs,
	url = {https://cucumber.io/docs/gherkin/reference/},
	title = {Gherkin Reference},
	year = 2024
}


%My own work
@inproceedings{chiang2022towards,
	title={Towards the adoption of model based system safety engineering in the automotive industry},
	author={Chiang, Thomas and Mendoza, Rodrigo Gomez and Mahmood, Johan and Paige, Richard F},
	booktitle={Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
	pages={579--587},
	year={2022}
}

@inproceedings{chiang2024mapping,
	author = {Chiang, Thomas and Paige, Richard and Mosser, S\'ebastien and Wassyng, Alan},
	title = {Mapping Requirements to Features to Create Traceability in Product Line Models},
	conference = {MODELS},
	booktitle={Proceedings of the 27th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
	year = {2024}
}



%DOORS
@article{dick2017doors,
	title={Doors: A tool to manage requirements},
	author={Dick, Jeremy and Hull, Elizabeth and Jackson, Ken and Dick, Jeremy and Hull, Elizabeth and Jackson, Ken},
	journal={Requirements Engineering},
	pages={187--206},
	year={2017},
	publisher={Springer}
}

@inproceedings{GEARS,
	author = {Krueger, Charles W.},
	title = {BigLever software gears and the 3-tiered SPL methodology},
	year = {2007},
	isbn = {9781595938657},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi-org.libaccess.lib.mcmaster.ca/10.1145/1297846.1297918},
	doi = {10.1145/1297846.1297918},
	abstract = {BigLever Software Gears is a software product line development tool that allows you to engineer your product line portfolio as though it is a single system. Gears is designed to support and enable all three tiers in the new generation 3-Tiered Software Product Line (SPL) Methodology, across the full SPL engineering lifecycle. Gears and the 3-Tiered SPL Methodology have played an instrumental role in some of the industry's most notable real-world success stories including Salion, 2004 Software Product line Hall of Fame Inductee, and Engenio/LSI Logic, 2006 Software Product Line Hall of Fame inductee.},
	booktitle = {Companion to the 22nd ACM SIGPLAN Conference on Object-Oriented Programming Systems and Applications Companion},
	pages = {844–845},
	numpages = {2},
	keywords = {software product lines},
	location = {Montreal, Quebec, Canada},
	series = {OOPSLA '07}
}

%physics of notation

@ARTICLE{5353439,
	author={Moody, Daniel},
	journal={IEEE Transactions on Software Engineering}, 
	title={The “Physics” of Notations: Toward a Scientific Basis for Constructing Visual Notations in Software Engineering}, 
	year={2009},
	volume={35},
	number={6},
	pages={756-779},
	keywords={Software engineering;Humans;Visualization;Design optimization;Problem-solving;Physics;Concrete;Flowcharts;Unified modeling language;Computer industry;Modeling;analysis;diagrams;communication;visualization;visual syntax;concrete syntax.},
	doi={10.1109/TSE.2009.67}}

@inproceedings{colorblind2021,
	author = {Paul Tol},
	title = {INTRODUCTION TO COLOUR SCHEMES},
	url = {https://personal.sron.nl/~pault/},
	year = {2019}
}

%Software as a medical device

@book{HC_SaMD,
	author = {Health Canada},
	title = {Software as a Medical Device Guidance Document},
	publisher = {Health Canada},
	year = {2019}
}

@incollection{pelayo2013software,
	title={Software as a medical device: regulatory critical issues},
	author={Pelayo, Sylvia and Bras Da Costa, Sabrina and Leroy, Nicolas and Loiseau, S{\'e}verine and Beuscart-Zephir, Marie-Catherine},
	booktitle={Enabling Health and Healthcare through ICT},
	pages={337--342},
	year={2013},
	publisher={IOS Press}
}


%Requirements
@book{meyer2022handbook,
	title={Handbook of Requirements and Business Analysis},
	author={Meyer, Bertrand},
	year={2022},
	publisher={Springer}
}

@book{robertson2012mastering,
	title={Mastering the requirements process: Getting requirements right},
	author={Robertson, Suzanne and Robertson, James},
	year={2012},
	publisher={Addison-wesley}
}

@article{robertson2000volere,
	title={Volere},
	author={Robertson, James and Robertson, Suzanne},
	journal={Requirements Specification Templates},
	year={2000}
}

@book{sommerville1997requirements,
	title={Requirements engineering: a good practice guide},
	author={Sommerville, Ian and Sawyer, Pete},
	year={1997},
	publisher={John Wiley \& Sons, Inc.}
}

@article{sommerville1997viewpoints,
	title={Viewpoints: principles, problems and a practical approach to requirements engineering},
	author={Sommerville, Ian and Sawyer, Pete},
	journal={Annals of software engineering},
	volume={3},
	number={1},
	pages={101--130},
	year={1997},
	publisher={Springer}
}

@book{lamsweerde2009requirements,
	title={Requirements engineering: from system goals to UML models to software specifications},
	author={Lamsweerde, A van},
	year={2009},
	publisher={John Wiley \& Sons, Ltd}
}

%Ansys Medini

@misc{ansys_medini,
	author = {Ansys},
	title = {Ansys Medini Analyze},
	year = {2024},
	URL = {https://www.ansys.com/products/safety-analysis/ansys-medini-analyze}
}

@misc{CanadaCrashStats,
	howpublished = "\url{https://tc.canada.ca/en/road-transportation/statistics-data/canadian-motor-vehicle-traffic-collision-statistics-2022}",
	author = {Government of Canada},
	year = {2024},
	title = {Canadian Motor Vehicle Traffic Collision Statistics: 2022},
	note = "[Online; accessed 2024-11-27]"
}

@misc{AgeGenderStats,
	howpublished = "\url{https://www150.statcan.gc.ca/n1/daily-quotidien/240925/g-a002-eng.htm}",
	author = {Government of Canada},
	year = {2024},
	title = {Age and gender pyramid as of July 1, 2004, and July 1, 2024, Canada},
	note = "[Online; accessed 2024-11-27]"
}

@misc{AgeWeightStats,
	howpublished = "\url{https://www150.statcan.gc.ca/n1/pub/82-626-x/2013001/t024-eng.htm}",
	author = {Government of Canada},
	year = {2015},
	title = {Measured weight, by age and sex, household population, Canada, 2009 to 2011},
	note = "[Online; accessed 2024-11-27]"
}

@misc{AgeHeightStats,
	howpublished = "\url{https://www150.statcan.gc.ca/n1/pub/82-626-x/2013001/t023-eng.htm}",
	author = {Government of Canada},
	year = {2015},
	title = {Measured standing height, by age and sex, household population, Canada, 2009 to 2011},
	note = "[Online; accessed 2024-11-27]"
}

%Goal Diagrams

@inproceedings{wautelet2016building,
	title={Building a rationale diagram for evaluating user story sets},
	author={Wautelet, Yves and Heng, Samedi and Kolp, Manuel and Mirbel, Isabelle and Poelmans, Stephan},
	booktitle={2016 IEEE Tenth International Conference on Research Challenges in Information Science (RCIS)},
	pages={1--12},
	year={2016},
	organization={IEEE}
}

@inproceedings{lopez2012specialization,
	title={Specialization in i* strategic rationale diagrams},
	author={L{\'o}pez, Lidia and Franch, Xavier and Marco, Jordi},
	booktitle={Conceptual Modeling: 31st International Conference ER 2012, Florence, Italy, October 15-18, 2012. Proceedings 31},
	pages={267--281},
	year={2012},
	organization={Springer}
}

@inproceedings{10.1145/3652620.3687816,
	author = {Chiang, Thomas and Paige, Richard and Wassyng, Alan and Mosser, Sebastien},
	title = {A Tool For Feature-Requirement Traceability Using Requirement Canvas and Encapsulation},
	year = {2024},
	isbn = {9798400706226},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3652620.3687816},
	doi = {10.1145/3652620.3687816},
	abstract = {System traceability from requirements to implementation is desirable, often mandatory, for complex and safety-critical system development. However, maintaining traceability documentation can be extremely taxing and tedious through iterative and incremental development life cycles. The problem is further exacerbated when product variability is introduced in the system development. Feature modelling and product line engineering are becoming increasingly common in safety-critical domains such as the automotive domain when manufacturers must consider maintaining documentation for multiple variations of a single vehicle. This problem is made even more complex by the yearly iterations they have on their vehicles. Thus, we introduce CyclicL, a tool for developing, managing, and modelling feature-requirement traceability through iterative and incremental development strategies. CyclicL is designed to facilitate traceability between features and requirements through various product iterations, and multiple incremental feature and requirement changes.},
	booktitle = {Proceedings of the ACM/IEEE 27th International Conference on Model Driven Engineering Languages and Systems},
	pages = {725–734},
	numpages = {10},
	keywords = {model-driven engineering, requirement engineering, product line engineering, product families, domain-specific languages, traceability generation, traceability management, feature modelling, requirement diagrams, encapsulation},
	location = {Linz, Austria},
	series = {MODELS Companion '24}
}

@inproceedings{10.1145/3652620.3688349,
	author = {Chiang, Thomas and Paige, Richard and Wassyng, Alan and Mosser, Sebastien},
	title = {Mapping Requirements to Features to Create Traceability in Product Line Models},
	year = {2024},
	isbn = {9798400706226},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3652620.3688349},
	doi = {10.1145/3652620.3688349},
	abstract = {Developers and engineers have shown the many benefits of feature modelling for identifying reusable software and hardware components across product lines and platforms. However, a gap exists when it comes to identifying reusable products, and requirements across iterations of features. Due to the ambiguous relationship between features and requirements, it can be difficult to determine the boundary between them. We propose a methodology for using features to encapsulate requirements by establishing a clear hierarchy between features and requirements. This will assist feature-requirement traceability tooling and automation development.},
	booktitle = {Proceedings of the ACM/IEEE 27th International Conference on Model Driven Engineering Languages and Systems},
	pages = {1180–1187},
	numpages = {8},
	keywords = {feature modelling, requirement diagrams, requirement canvas, traceability, model-driven engineering, traceability maintenance, traceability generation, product line engineering, requirement engineering, domain-specific languages},
	location = {Linz, Austria},
	series = {MODELS Companion '24}
}

@Inbook{Beidu2019,
	author="Beidu, Sandy
	and Atlee, Joanne M.",
	editor="ter Beek, Maurice H.
	and Fantechi, Alessandro
	and Semini, Laura",
	title="Detecting Feature Interactions in FORML Models",
	bookTitle="From Software Engineering to Formal Methods and Tools, and Back: Essays Dedicated to Stefania Gnesi on the Occasion of Her 65th Birthday",
	year="2019",
	publisher="Springer International Publishing",
	address="Cham",
	pages="220--235",
	abstract="Requirement engineers must know how features (units of functionality) interact, in order to resolve undesired interactions. Model checking has been proposed as an effective method for detecting feature interactions. We propose a method for (1) modelling features as distinct modules (explicating intended interactions with other features), (2) composing feature modules into a system model that preserves intended interactions, (3) translating this rich model into the input language of a model checker, and (4) automatically generating correctness properties whose violations reveal unintended feature interactions.",
	isbn="978-3-030-30985-5",
	doi="10.1007/978-3-030-30985-5_14",
	url="https://doi.org/10.1007/978-3-030-30985-5_14"
}

@INPROCEEDINGS{6345799,
	author={Shaker, Pourya and Atlee, Joanne M. and Wang, Shige},
	booktitle={2012 20th IEEE International Requirements Engineering Conference (RE)}, 
	title={A feature-oriented requirements modelling language}, 
	year={2012},
	volume={},
	number={},
	pages={151-160},
	keywords={Unified modeling language;Acceleration;Vehicles;Feature extraction;Adaptation models;Computational modeling;Software;Requirements modelling;software product lines},
	doi={10.1109/RE.2012.6345799}}

@inproceedings{horcas2019software,
	title={Software product line engineering: a practical experience},
	author={Horcas, Jose-Miguel and Pinto, M{\'o}nica and Fuentes, Lidia},
	booktitle={Proceedings of the 23rd International Systems and Software Product Line Conference-Volume A},
	pages={164--176},
	year={2019}
}

@inproceedings{becker2024not,
	title={Not Quite There Yet: Remaining Challenges in Systems and Software Product Line Engineering as Perceived by Industry Practitioners},
	author={Becker, Martin and Rabiser, Rick and Botterweck, Goetz},
	booktitle={Proceedings of the 28th ACM International Systems and Software Product Line Conference},
	pages={179--190},
	year={2024}
}

@inproceedings{bilic2019integrated,
	title={An integrated model-based tool chain for managing variability in complex system design},
	author={Bilic, Damir and Brosse, Etienne and Sadovykh, Andrey and Truscan, Dragos and Bruneliere, Hugo and Ryssel, Uwe},
	booktitle={2019 ACM/IEEE 22nd International Conference on Model Driven Engineering Languages and Systems Companion (MODELS-C)},
	pages={288--293},
	year={2019},
	organization={IEEE}
}

@inproceedings{jongeling2020co,
	title={Co-evolution of simulink models in a model-based product line},
	author={Jongeling, Robbert and Cicchetti, Antonio and Ciccozzi, Federico and Carlson, Jan},
	booktitle={Proceedings of the 23rd ACM/IEEE international conference on model driven engineering languages and systems},
	pages={263--273},
	year={2020}
}

@incollection{richters2002ocl,
	title={OCL: Syntax, semantics, and tools},
	author={Richters, Mark and Gogolla, Martin},
	booktitle={Object Modeling with the OCL: The Rationale behind the Object Constraint Language},
	pages={42--68},
	year={2002},
	publisher={Springer}
}

@incollection{cabot2012object,
	title={Object constraint language (OCL): a definitive guide},
	author={Cabot, Jordi and Gogolla, Martin},
	booktitle={International school on formal methods for the design of computer, communication and software systems},
	pages={58--90},
	year={2012},
	publisher={Springer}
}

@inproceedings{10.1145/2791060.2791071,
	author = {Wozniak, Len and Clements, Paul},
	title = {How automotive engineering is taking product line engineering to the extreme},
	year = {2015},
	isbn = {9781450336130},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2791060.2791071},
	doi = {10.1145/2791060.2791071},
	abstract = {Automotive manufacturing ranks among the most extreme instances of systems and software product line engineering (PLE). The product family numbers in the millions, each product is highly complex in its own right, and the variation across products is literally astronomical in scale. This paper explores the aspects that make the domain extreme and the very specific implications they have for PLE. These implications include the need for efficient manufacturing, complexity management, concurrent development streams, globally distributed engineering and production, a hierarchical product family tree, multi-level variation binding, constraint management, and a highly robust and integrated PLE tooling environment. Happily, the PLE paradigm supporting these implications brings about a number of opportunities for analysis and automation that provide efficiencies of production previously unattainable. We focus on one example in depth: The management and automated generation of the many thousands of calibration parameters that determine vehicle-specific software behavior. Throughout, we use the vehicle product line at General Motors, which we believe to be the world's largest, to illustrate and ground our journey through automotive PLE.},
	booktitle = {Proceedings of the 19th International Conference on Software Product Line},
	pages = {327–336},
	numpages = {10},
	keywords = {automotive product lines, bill-of-features, feature modeling, feature profiles, product configurator, product line engineering, product portfolio, second generation product line engineering, software product lines, variation points},
	location = {Nashville, Tennessee},
	series = {SPLC '15}
}
